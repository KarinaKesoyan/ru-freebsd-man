.\" Copyright (C) 2001 Matthew Dillon. Все права защищены.
.\"
.\" Распространение и использование в исходных и двоичных формах, с модификацией или без
.\" модификацией, разрешены при соблюдении следующих условий
.\" соблюдены:
.\" 1. Перераспределение исходного кода должно сохранять вышеуказанное уведомление об авторских правах
.\" уведомление об авторских правах, этот список условий и следующий отказ от ответственности.
.\" 2. Перераспределение в двоичной форме должно воспроизводить вышеуказанное уведомление об авторских правах
.\" уведомление об авторских правах, этот список условий и следующий отказ от ответственности в
.\" документации и/или других материалах, поставляемых вместе с дистрибутивом.
.\"
.\" ДАННОЕ ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ ПРЕДОСТАВЛЯЕТСЯ АВТОРОМ И РАЗРАБОТЧИКАМИ ``КАК ЕСТЬ`` И
.\" ЛЮБЫЕ ЯВНЫЕ ИЛИ ПОДРАЗУМЕВАЕМЫЕ ГАРАНТИИ, ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ
.\" ПОДРАЗУМЕВАЕМЫЕ ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ И ПРИГОДНОСТИ ДЛЯ КОНКРЕТНОЙ ЦЕЛИ
.\" НЕ ПРИНИМАЮТСЯ.  НИ ПРИ КАКИХ ОБСТОЯТЕЛЬСТВАХ АВТОР ИЛИ СОАВТОРЫ НЕ НЕСУТ ОТВЕТСТВЕННОСТИ
.\" ЗА ЛЮБЫЕ ПРЯМЫЕ, КОСВЕННЫЕ, СЛУЧАЙНЫЕ, СПЕЦИАЛЬНЫЕ, ПРИМЕРНЫЕ ИЛИ КОСВЕННЫЕ УБЫТКИ.
.\" УЩЕРБ (ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ, ПРИОБРЕТЕНИЕ ТОВАРОВ-ЗАМЕНИТЕЛЕЙ
.\" ИЛИ УСЛУГИ; ПОТЕРЮ ИСПОЛЬЗОВАНИЯ, ДАННЫХ ИЛИ ПРИБЫЛИ; ИЛИ ПЕРЕРЫВ В РАБОТЕ)
.\" НЕЗАВИСИМО ОТ ПРИЧИН И ЛЮБОЙ ТЕОРИИ ОТВЕТСТВЕННОСТИ, БУДЬ ТО КОНТРАКТ, СТРОГИЙ
.\" ОТВЕТСТВЕННОСТИ, ИЛИ ДЕЛИКТА (ВКЛЮЧАЯ ХАЛАТНОСТЬ ИЛИ ИНОЕ), ВОЗНИКАЮЩИХ КАКИМ-ЛИБО ОБРАЗОМ
.\" В РЕЗУЛЬТАТЕ ИСПОЛЬЗОВАНИЯ ДАННОГО ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ, ДАЖЕ ЕСЛИ ВЫ БЫЛИ ПРЕДУПРЕЖДЕНЫ О ВОЗМОЖНОСТИ
.\" ТАКОГО УЩЕРБА.
.\"
.Dd May 26, 2001
.Dt БРАНДМАУЭР 7
.Os
.Sh ИМЯ
.Nm брандмауэр
.Nd простые брандмауэры под FreeBSD
.Sh ОСНОВНЫЕ СВЕДЕНИЯ О БРАНДМАУЭРЕ
Брандмауэр чаще всего используется для защиты внутренней сети
от внешней сети, не позволяя внешней сети
произвольных подключений к внутренней сети.
Брандмауэры
также используются для предотвращения подделки внутренних
IP-адреса и для изоляции таких служб, как NFS или SMBFS (Windows
общий доступ к файлам) в сегментах локальной сети.
.Pp
.Fx
также имеет возможность ограничивать пропускную способность с помощью
.Xr dummynet 4 .
Эта функция может быть полезна, когда необходимо гарантировать определенную
пропускную способность для критически важной цели.
например, если вы проводите видеоконференции через Интернет по
T1 (1,5 МБит/с), вы можете захотеть ограничить пропускную способность всего остального
трафика T1 до 1 МБит/с, чтобы зарезервировать хотя бы 0,5 МБит
для соединений видеоконференций.
Аналогично, если вы
запускаете популярный веб-сайт или ftp-сайт из центра размещения
вы можете ограничить пропускную способность, чтобы избежать чрезмерной платы за пропускную способность
провайдера.
.Pp
Наконец,
.Fx
брандмауэры могут использоваться для перенаправления пакетов или изменения адреса следующего узла
адреса пакетов, чтобы помочь направить их в нужное место назначения.
Переадресация пакетов чаще всего используется для поддержки NAT (трансляции сетевых
трансляции адресов), которая позволяет внутренней сети, использующей
частное IP-пространство для подключения к внешней сети для просмотра веб-страниц
или других целей.
.Pp
Создание межсетевого экрана может показаться тривиальной задачей, но большинство людей
ошибаются.
Самая распространенная ошибка - создание эксклюзивного
а не всеохватывающий брандмауэр.
Исключительный брандмауэр
пропускает все пакеты, кроме тех, которые соответствуют набору правил.
Всеохватывающий брандмауэр пропускает только пакеты, соответствующие набору правил
через него.
Инклюзивные брандмауэры намного, намного безопаснее, чем эксклюзивные
брандмауэров, но их сложнее правильно построить.
На
Вторая наиболее распространенная ошибка - закрывать все, кроме
конкретного порта, который вы хотите пропустить.
TCP/IP должен иметь возможность
получать определенные типы ошибок ICMP, чтобы функционировать правильно - например.
например, для реализации обнаружения MTU.
Кроме того, ряд распространенных
системных демонов устанавливают обратные соединения с
.Sy auth
в попытке аутентифицировать пользователя, устанавливающего соединение.
Auth довольно опасен, но правильная реализация заключается в том, чтобы возвращать
TCP-сброс при попытке соединения, а не просто блокировать
пакет.
Мы рассмотрим эти и другие причуды, связанные с созданием
брандмауэра в примере брандмауэра ниже.
.Sh КОНФИГУРАЦИЯ ЯДРА IPFW
Вам не нужно создавать собственное ядро, чтобы использовать функции IP-брандмауэра.
Если вы включите брандмауэр в вашем
.Pa /etc/rc.conf
(см. ниже), модуль ядра ipfw будет загружаться автоматически
при необходимости.
Однако,
если вы параноик, вы можете скомпилировать IPFW непосредственно в
.Fx
ядра, используя файл
.Sy IPFIREWALL
набор опций.
Если ipfw скомпилирован в ядро, он запрещает все
пакеты по умолчанию, что означает, что если вы не загрузите
набор разрешающих правил через
.Pa /etc/rc.conf ,
перезагрузка с новым ядром приведет к отключению сети.
Это может помешать вам получить доступ к системе, если вы
если вы не сидите за консолью.
Также довольно часто
обновить ядро до новой версии и перезагрузиться перед обновлением
двоичных файлов.
Это может привести к несовместимости между
сайтом
.Xr ipfw 8
и ядром, в результате чего программа не сможет запуститься в
последовательности загрузки, что также приведет к недоступности машины.
В связи с этими проблемами в программе
.Sy IPFIREWALL_DEFAULT_TO_ACCEPT

Также доступна опция ядра, которая изменяет стандартный брандмауэр
на прохождение всех пакетов.
Обратите внимание, однако, что использование этой опции
может открыть небольшое окно возможностей во время загрузки, когда ваш
брандмауэр пропускает все пакеты.
Тем не менее, это хороший вариант для использования
во время работы с
.Fx
брандмауэром.
Избавьтесь от него, как только поймете, как все это работает
чтобы закрыть лазейку.
Существует третий вариант, называемый
.Sy IPDIVERT
которая позволяет использовать брандмауэр для перенаправления пакетов в пользовательскую программу
и необходима, если вы хотите использовать
.Xr natd 8
для предоставления частным внутренним сетям доступа к внешнему миру.
Если вы хотите иметь возможность ограничить пропускную способность, используемую определенными типами
трафика, то следует использовать
.Sy DUMMYNET
должен быть использован для включения
.Em ipfw pipe
правила.
.Sh ПРИМЕР БРАНДМАУЭРА НА ОСНОВЕ IPFW
Здесь приведен пример брандмауэра на основе ipfw, взятый с машины с тремя
интерфейсными платами.
fxp0 подключен к "открытой" локальной сети.
Машины
в этой локальной сети имеют два IP-адреса: внутренний 10.\& и
IP-адреса с маршрутизацией в Интернет.
В нашем примере 192.100.5.x представляет собой
блок маршрутизируемых в Интернет IP-адресов, а 10.x.x.x представляет внутреннюю
сети.
Хотя это не имеет значения для данного примера, 10.0.1.x
назначен в качестве блока внутренних адресов для локальной сети на fxp0, 10.0.2.x
для локальной сети на fxp1 и 10.0.3.x для локальной сети на fxp2.
.Pp
В этом примере мы хотим изолировать все три локальные сети от Интернета
а также изолировать их друг от друга, и мы хотим предоставить всем
внутренним адресам доступ в Интернет через NAT-шлюз, запущенный
на этой машине.
Чтобы шлюз NAT работал, машине брандмауэра
предоставляются два адреса для доступа в Интернет на fxp0 в дополнение к
внутреннего адреса 10.\& на fxp0: один открытый адрес (не показан)
представляет собой официальный адрес машины, а второй открытый адрес
адрес (192.100.5.5 в нашем примере) представляет собой NAT-шлюз
IP-адрес rendezvous.
Мы усложним пример, предоставив машинам
в открытой локальной сети внутренние адреса 10.0.0.x, а также открытые адреса
адреса.
Идея заключается в том, что вы можете привязать внутренние службы
к внутренним адресам даже на открытых машинах и при этом защитить
эти службы от Интернета.
Единственные службы, которые вы запускаете на
открытых IP-адресах, будут те, которые вы хотите вывести в Интернет.
Интернет.
.Pp
Важно отметить, что сеть 10.0.0.x в нашем примере
не защищена нашим брандмауэром.
Вы должны убедиться, что ваш
Интернет-маршрутизатор защищает эту сеть от подмены извне.
Кроме того, в нашем примере мы практически предоставили открытому хосту свободу
в нашей внутренней сети при работе служб через
внутренние IP-адреса (10.0.0.x).
Это представляет определенный риск для безопасности
риск: что, если открытый хост будет скомпрометирован?
Чтобы устранить
риск и заставить все, что поступает через LAN0, проходить через
брандмауэр, удалите правила 01010 и 01011.
.Pp
Наконец, обратите внимание, что использование внутренних адресов представляет собой
большую часть нашего механизма защиты брандмауэра.
При наличии надлежащих
защите от подмены, ничто внешнее не может напрямую
получить доступ к внутреннему (LAN1 или LAN2) узлу.
.Bd -literal
# /etc/rc.conf
#
firewall_enable="YES"
firewall_type="/etc/ipfw.conf"

# временный диапазон привязки портов пусть
# через брандмауэр.
# ПРИМЕЧАНИЕ: сильно загруженные службы, работающие через брандмауэр, могут потребовать.
# больший диапазон портов для привязки к локальному размеру.  4000-10000 или 4000-30000
# могут быть лучшим выбором.
ip_portrange_first=4000
ip_portrange_last=5000
\&...
.Ed
.Bd -literal
# /etc/ipfw.conf

# FIREWALL: the firewall machine / nat gateway
# LAN0	    10.0.0.X and 192.100.5.X (dual homed)
# LAN1	    10.0.1.X
# LAN2	    10.0.2.X
# sw:	    ethernet switch (unmanaged)
#
# 192.100.5.x represents IP addresses exposed to the Internet
# (i.e. Internet routeable).  10.x.x.x represent internal IPs
# (not exposed)
#
#   [LAN1]
#      ^
#      |
#   FIREWALL -->[LAN2]
#      |
#   [LAN0]
#      |
#      +--> exposed host A
#      +--> exposed host B
#      +--> exposed host C
#      |
#   INTERNET (secondary firewall)
#    ROUTER
#      |
#    [Internet]
#
# НЕ ПОКАЗАНО: Роутер INTERNET должен содержать правила, запрещающие
# все пакеты с IP-адресами источников в блоке 10. для того, чтобы
# защитить блок 10.0.0.x с двойным хомингом.  Открытые хосты.
# не защищены в этом примере - они должны только связывать
# открытые службы к открытым IP-адресам, но могут безопасно связывать внутренние
# службы к внутренним IP.
#
# Шлюз NAT работает, принимая пакеты, отправленные с внутренних
# IP-адресов на внешние IP-адреса и маршрутизируя их в natd, который
# прослушивает порт 8668.   Этим занимается правило 00300.  Данные поступают
# обратно в natd из внешнего мира, также должны быть направлены в natd с помощью
# правило 00301.  Чтобы сделать пример интересным, отметим, что нам
# НЕ нужно направлять внутренние запросы к открытым хостам через natd
# (правило 00290), потому что эти открытые хосты знают о нашей
# 10. сети.  Это может снизить нагрузку на natd.  Также обратите внимание, что нам
# конечно, не нужно направлять внутренний<->внутренний трафик через
# natd, поскольку эти хосты знают, как маршрутизировать нашу внутреннюю сеть # 10.
# Команда natd, которую мы запускаем из /etc/rc.local, показана ниже.  См.
# также версию natd для ядра, ipnat.
#
# natd -s -u -a 208.161.114.67

add 00290 skipto 1000 ip from 10.0.0.0/8 to 192.100.5.0/24
add 00300 divert 8668 ip from 10.0.0.0/8 to not 10.0.0.0/8
add 00301 divert 8668 ip from not 10.0.0.0/8 to 192.100.5.5

# Сократите правила, чтобы избежать высокой пропускной способности
# весь набор правил.  Разрешите установленные tcp-соединения,
# и сократить все исходящие пакеты, исходя из предположения, что
# нам нужен брандмауэр только для входящих пакетов.
#
# Разрешение установленных tcp-соединений создает небольшую
# дыру, но может быть необходимо, чтобы избежать перегрузки брандмауэра.
# Если вы беспокоитесь, вы можете переместить правило после проверки на подделку.
# проверки.
#
add 01000 allow tcp from any to any established
add 01001 allow all from any to any out via fxp0
add 01001 allow all from any to any out via fxp1
add 01001 allow all from any to any out via fxp2

# Защита от подделок.  Это зависит от того, насколько вы доверяете своим
# внутренним сетям.  Пакеты, полученные через fxp1, ДОЛЖНЫ приходить от
# 10.0.1.x. Пакеты, полученные через fxp2, ДОЛЖНЫ приходить от 10.0.2.x.
# Пакеты, полученные через fxp0, не могут поступать из блоков LAN1 или LAN2.
# блоков.  Мы не можем защитить 10.0.0.x здесь, это должен сделать интернет-маршрутизатор.
# должен сделать это за нас.
#
add 01500 deny all from not 10.0.1.0/24 in via fxp1
add 01500 deny all from not 10.0.2.0/24 in via fxp2
add 01501 deny all from 10.0.1.0/24 in via fxp0
add 01501 deny all from 10.0.2.0/24 in via fxp0

# В этом примере набора правил нет ограничений между
# внутренними хостами, даже находящимися в открытой локальной сети (при условии, что
# они используют внутренний IP-адрес).  Это представляет собой
# потенциальную брешь в безопасности (что, если открытый хост будет
# скомпрометирован?).  Если вы хотите, чтобы все ограничения применялись
# между тремя локальными сетями, отгородив их друг от друга брандмауэром
# друг от друга для дополнительной безопасности, удалите эти два правила.
#
# Если вы хотите изолировать локальные сети LAN1 и LAN2, но при этом хотите.
# предоставить хостам свободное взаимодействие друг с другом, избавьтесь
# избавьтесь от правила 01010 и оставьте правило 01011.
#
# (закомментировано, откомментируйте для менее ограничительного брандмауэра)
#add 01010 allow all from 10.0.0.0/8 to 10.0.0.0/8
#add 01011 allow all from 192.100.5.0/24 to 192.100.5.0/24
#

# КОНКРЕТНЫЕ СЕРВИСЫ, РАЗРЕШЕННЫЕ С КОНКРЕТНЫХ LANS
#
# При использовании более ограничительного брандмауэра разрешите определенным локальным сетям
# доступ к определенным службам, работающим на самом брандмауэре.
# В данном случае мы предполагаем, что локальной сети LAN1 нужен доступ к обмену файлами, запущенному
# на брандмауэре.  Если используется менее ограничительный брандмауэр
# (разрешающее правило 01010), вам не нужны эти правила.
#
add 01012 allow tcp from 10.0.1.0/8 to 10.0.1.1 139
add 01012 allow udp from 10.0.1.0/8 to 10.0.1.1 137,138

# ОБЩИЕ СЕРВИСЫ, КОТОРЫМ РАЗРЕШЕНО ПЕРЕСЕКАТЬ ВНУТРЕННИЙ и ОТКРЫТЫЕ LANS
#
# Мы разрешаем определенные UDP-службы: DNS, ntalk и ntp.
# Обратите внимание, что внутренние службы защищены благодаря тому, что имеют
# защищенных от подмены внутренних IP-адресов (10. net), поэтому эти правила
# действительно применяются только к сервисам, привязанным к открытым IP-адресам.  Мы должны
# разрешить фрагменты UDP, иначе большие фрагментированные пакеты UDP
# не выдержат брандмауэра.
#
# Если мы хотим открыть временные порты служб с большим количеством номеров.
# для таких вещей, как ответы на поиск DNS, мы можем использовать диапазон портов,
# в этом примере 4000-65535, и задаем в /etc/rc.conf переменные

# на всех открытых машинах, чтобы убедиться, что они привязывают временные порты
# к диапазону открытых портов (см. пример rc.conf выше)
#
add 02000 allow udp from any to any 4000-65535,domain,ntalk,ntp
add 02500 allow udp from any to any frag

# Разрешите аналогичные службы для TCP.  Опять же, они применяются только к
# сервисам, привязанным к открытым адресам.  ПРИМЕЧАНИЕ: мы разрешаем 'auth'
# но на самом деле не запускаем identd-сервер на любом открытом
# порту.  Это позволяет машине, на которой выполняется аутентификация, отвечать
# TCP RESET.  Отбрасывание пакета приведет к задержкам
# при подключении к удаленным сервисам, выполняющим обратный поиск идентификатора.
#
# Обратите внимание, что мы не пропускаем фрагменты tcp, и что мы вообще
# не разрешаем фрагменты вообще (за исключением UDP-фрагментов).  Мы
# ожидаем, что протокол обнаружения TCP mtu будет работать правильно, поэтому
# не должно быть TCP-фрагментов.
#
add 03000 allow tcp from any to any http,https
add 03000 allow tcp from any to any 4000-65535,ssh,smtp,domain,ntalk
add 03000 allow tcp from any to any auth,pop3,ftp,ftp-data

# Важно разрешить определенные типы ICMP, вот список
# общих типов ICMP.  Обратите внимание, что важно разрешить ICMP типа 3
# через.
#
# 0 Echo Reply
# 3 Destination Unreachable (используется для обнаружения TCP MTU, он же
# packet-too-big)
# 4 Source Quench (обычно не разрешается)
# 5 Redirect  (обычно не разрешается - может быть опасно!)
# 8 Echo
# 11 Time Exceeded
# 12 Parameter Problem
# 13 Timestamp
# 14 Timestamp Reply
#
# Иногда людям нужно разрешить пакеты ICMP REDIRECT, которые относятся к
# тип 5, но если вы разрешаете их, убедитесь, что ваш интернет-маршрутизатор
# запрещает его.

add 04000 allow icmp from any to any icmptypes 0,3,8,11,12,13,14

# регистрируйте все оставшиеся фрагменты, которые проходят.  Может быть полезно,
# в противном случае не стоит беспокоиться.  В качестве защиты имейте заключительное запрещающее правило, чтобы
# гарантировать, что ваш брандмауэр будет инклюзивным независимо от того, как настроено ядро
# настроено.
#
add 05000 deny log ip from any to any frag
add 06000 deny all from any to any
.Ed
.Sh ПРИВЯЗКА ПОРТОВ К ВНУТРЕННИМ И ВНЕШНИМ СЕРВИСАМ
Мы уже упоминали о мультихоминге хостов и привязке сервисов к внутренним или
внешним адресам, но толком не объяснили.
Когда у вас есть
хост с несколькими IP-адресами, вы можете привязать службы, запущенные на этом хосте, к определенным IP или внешним адресам.
на этом хосте к определенным IP-адресам или интерфейсам, а не ко всем IP-адресам.
Возьмем, к примеру,
например, машину брандмауэра: с тремя интерфейсами
и двумя открытыми IP-адресами
на одном из этих интерфейсов, машина брандмауэра известна под 5 различными
IP-адресами (10.0.0.1, 10.0.1.1, 10.0.2.1, 192.100.5.5 и, скажем.
192.100.5.1).
Если брандмауэр предоставляет услуги общего доступа к файлам в
сегмента локальной сети windows (скажем, это LAN1), вы можете использовать директиву samba 'bind interfaces'
чтобы специально привязать его только к IP-адресу LAN1.
Таким образом
таким образом, службы общего доступа к файлам не будут доступны для других сегментов локальной сети
сегментам.
То же самое относится и к NFS.
Если в LAN2 расположены инженерные рабочие станции UNIX
рабочие станции UNIX, вы можете указать nfsd привязываться именно к 10.0.2.1.
Вы
можно указать, как связать практически все службы на машине, и вы можете
можно использовать легкий
.Xr jail 8
для косвенной привязки служб, которые в противном случае не предоставляют такой возможности.
.Sh СМОТРИТЕ ТАКЖЕ
.Xr dummynet 4 ,
.Xr ipnat 5 ,
.Xr rc.conf 5 ,
.Xr smb.conf 5 Pq Pa ports/net/samba ,
.Xr samba 7 Pq Pa ports/net/samba ,
.Xr config 8 ,
.Xr ipfw 8 ,
.Xr ipnat 8 ,
.Xr jail 8 ,
.Xr natd 8 ,
.Xr nfsd 8
.Sh ДОПОЛНИТЕЛЬНЫЕ МАТЕРИАЛЫ
.Bl -tag -width indent
.It Nm Ipfilter
.Xr ipf 5 ,
.Xr ipf 8 ,
.Xr ipfstat 8
.It Nm Packet Filter
.Xr pf.conf 5 ,
.Xr pfctl 8 ,
.Xr pflogd 8
.El
.Sh ИСТОРИЯ
.Nm
была первоначально написана
.An Matthew Dillon
и впервые появилась
в
.Fx 4.3 ,
Май 2001.
