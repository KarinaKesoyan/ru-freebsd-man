.\" Авторское право (C) 1998 Matthew Dillon. Все права защищены.
.\" Copyright (c) 2019 The FreeBSD Foundation, Inc.
.\"
.\" Часть этой документации была написана
.\" Konstantin Belousov <kib@FreeBSD.org> при спонсорской поддержке
.\" от FreeBSD Foundation.
.\"
.\" Распространение и использование в исходном коде и двоичном формате, с
.\" изменениями или без них, разрешено при соблюдении следующих условий:
.\" 1. При повторном распространении исходного кода должны сохраняться вышеуказанное
.\"    уведомление об авторских правах, этот список условий и следующий отказ от ответственности.
.\" 2. При повторном распространении в двоичной форме должны воспроизводиться вышеуказанное
.\"    уведомление об авторских правах, этот список условий и следующий отказ от ответственности в
.\"    документации и/или других материалах, прилагаемых к дистрибутиву.
.\"
.\" ДАННОЕ ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ ПРЕДОСТАВЛЯЕТСЯ АВТОРОМ "КАК ЕСТЬ", И
.\" МЫ НЕ ДАЕМ НИКАКИХ ЯВНЫХ ИЛИ ПОДРАЗУМЕВАЕМЫХ ГАРАНТИЙ, ВКЛЮЧАЯ
.\" ПОДРАЗУМЕВАЕМЫЕ ГАРАНТИИ ТОВАРНОЙ ПРИГОДНОСТИ И ПРИГОДНОСТИ ДЛЯ ОПРЕДЕЛЕННОЙ ЦЕЛИ И Т.П.
.\" АВТОР НИ В КОЕМ СЛУЧАЕ НЕ НЕСЕТ ОТВЕТСТВЕННОСТИ
.\" ЗА ЛЮБОЙ ПРЯМОЙ, КОСВЕННЫЙ, СЛУЧАЙНЫЙ, ОСОБЫЙ, ПОКАЗАТЕЛЬНЫЙ ИЛИ ЛОГИЧЕСКИ ВЫТЕКАЮЩИЙ
.\" УЩЕРБ (ВКЛЮЧАЯ: ПРИОБРЕТЕНИЕ ЗАМЕНЯЮЩИХ ТОВАРОВ ИЛИ УСЛУГ; ПОТЕРЮ ВОЗМОЖНОСТИ ИСПОЛЬЗОВАНИЯ,
.\" ДАННЫХ ИЛИ ПРИБЫЛИ; ПЕРЕБОИ В РАБОТЕ)
.\" НЕЗАВИСИМО ОТ ПРИЧИН И ПО ЛЮБОЙ ТЕОРИИ ОТВЕТСТВЕННОСТИ, БУДЬ ТО В КОНТРАКТЕ,
.\" ИЛИ ПРАВОНАРУШЕНИЕ (ВКЛЮЧАЯ ХАЛАТНОСТЬ ИЛИ ИНОЕ ПРАВОНАРУШЕНИЕ ИНЫМ ОБРАЗОМ),
.\" ВОЗНИКАЮЩЕЕ КАКИМ-ЛИБО ОБРАЗОМ В РЕЗУЛЬТАТЕ ИСПОЛЬЗОВАНИЯ ДАННОГО ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ,
.\" ДАЖЕ ЕСЛИ ВЫ БЫЛИ ПРЕДУПРЕЖДЕНЫ О ВОЗМОЖНОСТИ ТАКОГО УЩЕРБА.
.\"
.Dd Октябрь 5, 2023
.Dt SECURITY 7
.Os
.Sh НАИМЕНОВАНИЕ
.Nm security
.Nd введение в безопасность во FreeBSD
.Sh ОПИСАНИЕ
Безопасность - это функция, которая начинается и заканчивается на системном администраторе.
Хотя всем многопользовательским системам
.Bx
присуща определенная степень безопасности,
работа по созданию и поддержанию дополнительных механизмов
безопасности для обеспечения
.Dq честности
is probably
пользователей, вероятно, является одним из самых важных начинаний
системного администратора.
Машины безопасны настолько, насколько вы их создаете, а
забота о безопасности постоянно конкурирует с потребностью человека
в удобстве.
.Ux
системы,
как правило, способны выполнять огромное количество
процессов одновременно, и многие из этих процессов работают как
серверы \(em это означает, что внешние объекты могут подключаться к ним и взаимодействовать с ними.
По мере того, как вчерашние мини-компьютеры и мэйнфреймы превращаются в современные настольные компьютеры,
а компьютеры объединяются в сети и подключаются к Интернету, безопасность становится
еще более серьезной проблемой.
.Pp
Безопасность лучше всего обеспечивается с помощью многоуровневого подхода onion. 

В двух словах, вы хотите создать столько уровней безопасности, сколько это удобно,
а затем тщательно отслеживать систему на предмет вторжений.
.Pp
Безопасность системы также связана с противодействием различным формам атак,
включая атаки, которые пытаются вывести систему из строя или иным образом сделать
ее непригодной для использования, но не пытаются взломать root.  Проблемы безопасности можно
разделить на несколько категорий:
.Bl -enum -offset indent
.It
Атаки типа "Отказ в обслуживании" (DoS)
.It
Компрометация учетной записи пользователя
.It
Компрометация Root через доступные серверы
.It
Компрометация Root через учетные записи пользователей
.It
Создание бэкдора
.El
.Pp
Атака типа "отказ в обслуживании" - это действие, которое лишает компьютер необходимых
ресурсов.
Как правило, DoS-атаки представляют собой механизмы грубой силы, которые пытаются
вывести компьютер из строя или иным образом сделать его непригодным для использования,
перегружая его серверы или сетевой стек.
Некоторые Dos-атаки пытаются воспользоваться ошибками в
сетевом стеке, чтобы вывести компьютер из строя с помощью одного пакета.
Последнее можно
исправить, только применив исправление к ядру.
Атаки на серверы
часто можно предотвратить, правильно указав параметры, ограничивающие нагрузку, которую серверы
несут на систему в неблагоприятных условиях.
С сетевыми атаками методом "грубой силы" справиться сложнее.
Например, атаку с использованием поддельных пакетов
практически невозможно предотвратить, если она не приведет к отключению вашей системы от Интернета.
Возможно, она не сможет вывести ваш компьютер из строя, но может привести к переполнению вашего интернет-канала.
.Pp
Компрометация учетной записи пользователя встречается даже чаще, чем DoS-атака. 
Некоторые
системные администраторы по-прежнему используют на своих компьютерах серверы
.Nm telnetd
и
.Xr ftpd 8 .
Эти серверы по умолчанию не работают по зашифрованным соединениям.
В результате, если у вас есть небольшая база пользователей, один или
несколько из них войдут в вашу систему удаленно
(что является наиболее распространенным и удобным способом входа в систему)
и их пароль будет перехвачен. Внимательный системный
администратор проанализирует свои журналы удаленного доступа в поисках подозрительных
адресов источников даже при успешном входе в систему.
.Pp
Всегда следует исходить из того, что, получив доступ к учетной записи пользователя, злоумышленник
может взломать root.
Однако реальность такова, что в хорошо защищенной
и поддерживаемой системе доступ к учетной записи пользователя не обязательно дает
злоумышленнику доступ к root.
Это различие важно, потому что без доступа
к root злоумышленник, как правило, не может скрыть свои следы и в лучшем случае
может только испортить файлы пользователя или вывести компьютер из строя.
Компрометация учетных записей пользователей происходит очень часто, поскольку пользователи, как правило, не принимают
мер предосторожности, которые принимают системные администраторы.
.Pp
Системные администраторы должны иметь в виду, что потенциально существует множество способов
взломать root на компьютере.
Злоумышленник может знать пароль root,
он может обнаружить ошибку на сервере, работающем под управлением root, и быть в состоянии взломать root через сетевое
подключение к этому серверу, или злоумышленник может знать об ошибке в программе SUID-root,
которая позволяет злоумышленнику взломать root, если он хотя бы раз взламывал учетную запись пользователя.
Многие из обнаруженных и закрытых на сегодняшний день брешей требуют от
злоумышленника значительного объема работы по устранению последствий,
поэтому большинство злоумышленников устанавливают бэкдоры.
Это дает вам удобный способ обнаружения злоумышленника.
Лишение злоумышленника возможности установить бэкдор
на самом деле может нанести ущерб вашей безопасности,
поскольку это не перекроет дыру, которую злоумышленник
изначально использовал для взлома.
.Pp
Средства защиты всегда должны быть реализованы с использованием многоуровневого
подхода
.Dq onion peel
и могут быть классифицированы следующим образом:
.Bl -enum -offset indent
.It
Защита учетных записей root и персонала
.It
Защита root \(em  root-run серверов и двоичных файлов SUID/SGID
.It
Защита учетных записей пользователей
.It
Защита файла паролей
.It
Защита ядра, необработанных устройств и файловых систем
.It
Быстрое обнаружение нежелательных изменений, внесенных в систему
.It
Паранойя
.El
.Sh ЗАЩИТА УЧЕТНОЙ ЗАПИСИ ROOT И УЧЕТНЫХ ЗАПИСЕЙ СОТРУДНИКОВ
Не пытайтесь защитить учетные записи сотрудников,
если у вас не защищена учетная запись root.
В большинстве систем учетной записи root присваивается пароль.
Первое, что вы делаете, это предполагаете, что пароль
.Em всегда
скомпрометирован.
Это не означает, что вы должны удалить пароль.
Пароль почти всегда необходим для консольного доступа к компьютеру.
Это означает, что вы не должны предоставлять возможность использовать
пароль за пределами консоли или, возможно, даже с помощью утилиты
.Xr su 1 .
Например, убедитесь, что ваши PTYS указаны как
.Dq Li небезопасные
в файле
.Pa /etc/ttys ,
чтобы запретить прямой вход пользователя root через
.Xr telnet 1 .
При использовании других служб входа, таких как
.Xr sshd 8 ,
убедитесь, что там также отключен прямой вход пользователя root.
Рассмотрите все способы доступа \(em сервисы, как
.Xr ftp 1 ,
часто не работают.
Прямой вход пользователя root должен быть разрешен только через системную консоль.
.Pp
Конечно, как системный администратор, вы должны иметь доступ к системе root, поэтому мы
используем некоторые возможности.
Но мы следим за тем, чтобы эти возможности требовали дополнительной проверки пароля для работы.
Один из способов сделать root доступным -
добавить соответствующие учетные записи сотрудников в группу
.Dq Li wheel
(в
.Pa /etc/group ) .
Сотрудникам, помещенным в группу
.Li wheel
разрешено использовать
.Xr su 1
для доступа к root.
Ни в коем случае не следует предоставлять сотрудникам собственный доступ
.Li wheel ,
добавляя их в группу
.Li wheel
при вводе пароля.
Учетные записи сотрудников следует поместить в группу
.Dq Li staff ,
а затем добавить в группу
.Li wheel
с помощью файла
.Pa /etc/group .
Только тех сотрудников, которым действительно
необходим root-доступ следует поместить в группу
.Li wheel .
При использовании такого метода аутентификации, как Kerberos, также возможно
использовать файл
.Pa .k5login
в учетной записи root, чтобы разрешить
.Xr ksu 1
получить root-права без необходимости добавлять кого-либо вообще в группу
.Li wheel .
Это может быть лучшим решением, поскольку механизм
.Li wheel
по-прежнему позволяет злоумышленнику взломать root,
если он завладел вашим файлом паролей и может взломать
учетную запись сотрудника.
Хотя наличие механизма
.Li wheel
лучше, чем отсутствие чего-либо вообще, но это не обязательно самый
безопасный вариант.
.Pp
Косвенным способом защиты учетной записи root является защита учетных записей ваших сотрудников с помощью альтернативного метода входа в систему и ввода
зашифрованного пароля для учетных записей сотрудников.
Таким образом, злоумышленник может украсть файл с паролями, но не сможет взломать
учетные записи сотрудников или root, даже если с root связан зашифрованный пароль (при условии, конечно, что у вас ограниченный доступ root к
консоли).
Сотрудники получают доступ к своим учетным записям сотрудников с помощью безопасного механизма входа в систему, такого как
.Xr kerberos 8
или
.Xr ssh 1
используя частный/общедоступный пару ключей.
огда вы используете что-то вроде Kerberos, вам, как правило, необходимо защитить компьютеры, на которых работают серверы Kerberos, и вашу настольную рабочую
станцию.
Когда вы используете пару открытых/закрытых ключей с помощью SSH, вы,
как правило, должны защитить компьютер,
.Em с которого
вы входите в систему (обычно это ваша рабочая станция),
но вы также можете добавить дополнительный уровень защиты к паре ключей,
защитив паролем пару ключей при ее создании с помощью
.Xr ssh-keygen 1 .
Возможность подбирать пароли к учетным записям сотрудников
также гарантирует, что сотрудники смогут войти в систему только с
помощью методов безопасного доступа, которые вы настроили. 
Таким образом, вы можете заставить всех сотрудников использовать безопасные зашифрованные
соединения для всех своих сеансов, что закрывает важную брешь,
используемую многими злоумышленниками: возможность подключения
к сети с несвязанного, менее защищенного компьютера.
.Pp
Более косвенные механизмы безопасности также предполагают, что вы выполняете вход
с сервера с более строгими ограничениями на сервер с менее строгими ограничениями.
Например, если на вашем главном сервере запущены все виды серверов,
на вашей рабочей станции не должен быть запущен ни один из них.
Для того чтобы ваша рабочая станция была
достаточно защищена, вы должны использовать как можно меньше серверов,
вплоть до полного отсутствия серверов, и вы должны использовать
защищенную паролем систему блокировка экрана.
Конечно, имея физический доступ к рабочей станции,
злоумышленник может взломать любую систему защиты,
которую вы на нее установили. Это определенно проблема,
которую вам следует учитывать, но вы также должны учитывать тот факт, 
что подавляющее большинство взломов происходит удаленно,
по сети, от людей, которые не имеют физического доступа к
вашей рабочей станции или серверам.
.Pp
Использование чего-то вроде Kerberos также дает вам возможность
отключить или изменить пароль для учетной записи сотрудника в
одном месте и немедленно применить его ко всем компьютерам, 
на которых у сотрудника может быть учетная запись.
Если учетная запись сотрудника будет взломана, не следует
недооценивать возможность мгновенной смены пароля на всех компьютерах.
При использовании отдельных паролей смена пароля на N компьютерах может
привести к путанице. Вы также можете ввести ограничения на повторный
ввод пароля с помощью Kerberos: мало того, что запрос Kerberos может
быть переведен в режим ожидания через некоторое время, но система
Kerberos может потребовать, чтобы пользователь выбрал новый пароль
через определенный промежуток времени (скажем, раз в месяц).
.Sh ЗАЩИТА  ROOT \(em ROOT-RUN СЕРВЕРОВ И ДВОИЧНЫХ ФАЙЛОВ SUID/SGID
Разумный системный администратор запускает только те серверы,
которые ему необходимы, не больше и не меньше. Имейте в виду,
что серверы сторонних производителей часто наиболее подвержены ошибкам.
Например, запуск старой версии
.Xr imapd 8
или
.Xr popper 8 Pq Pa ports/mail/popper
это все равно что предоставление универсального доступа root для всего мира.
Никогда не запускайте сервер, который вы предварительно не проверили.
Многие серверы не требуют запуска от имени пользователя root.
Например
.Xr talkd 8 ,
.Xr comsat 8 ,
и
.Xr fingerd 8
могут быть запущены в специальной пользовательской среде
.Dq sandboxes .
Песочница не идеальна, если только вы не столкнетесь с большим
количеством проблем, но традиционный подход к обеспечению
безопасности остается в силе: если кто-то может взломать сервер,
работающий в песочнице, ему все равно придется выходить из нее.
Чем больше уровней должен
преодолеть злоумышленник, тем ниже вероятность его успеха. Исторически рут-бреши обнаруживались практически на каждом сервере, когда-либо работавшем от
имени root, включая базовые системные серверы.
сли вы используете компьютер, на котором пользователи входят в систему только через
.Xr sshd 8
 никогда не входят в систему через
.Nm telnetd ,
просто отключите этот сервис!
.Pp
.Fx
теперь по умолчанию запускает
.Xr talkd 8 ,
.Xr comsat 8 ,
и
.Xr fingerd 8
в песочнице.
В зависимости от того, устанавливаете ли вы новую систему или обновляете
существующую, специальные учетные записи пользователей, 
используемые в этих изолированных системах, могут быть не установлены.
Благоразумный системный администратор по возможности исследует
и внедряет изолированные серверы для серверов.
.Pp
Существует ряд других серверов, которые обычно не работают в изолированных системах:
.Xr sendmail 8 ,
.Xr popper 8 ,
.Xr imapd 8 ,
.Xr ftpd 8 ,
и  другие.
Некоторым из них есть альтернативы, но их установка может потребовать
больше усилий, чем вы готовы потратить (снова сказывается фактор удобства).
Возможно, вам придется запускать эти серверы от имени пользователя root
и использовать другие механизмы для обнаружения возможных взломов с их помощью.
.Pp
Другой большой потенциальной дырой в системе являются двоичные
файлы SUID-root и SGID, установленные в системе.
Большинство из этих двоичных файлов, таких как
.Xr su 1 ,
находятся в
.Pa /bin , /sbin , /usr/bin ,
или
.Pa /usr/sbin .
Хотя ничто не является безопасным на 100%, двоичные файлы SUID и SGID,
используемые системой по умолчанию, можно считать достаточно безопасными.
Тем не менее, в этих двоичных файлах иногда обнаруживаются
пробелы. В 1998 году в Xlib была обнаружена уязвимость, которая сделала
.Xr xterm 1 Pq Pa ports/x11/xterm
(который обычно является SUID) уязвимым.
Лучше
на всякий случай предусмотрительный системный администратор
поместит двоичные файлы SUID, которые должны запускаться
только сотрудниками, в специальную группу, доступ к которой
может иметь только персонал, и избавится
.Pq Dq Li "chmod 000"
от любых двоичных файлов SUID, которые никто не использует.
Серверу без дисплея, как правило, не требуется двоичный файл
.Xr xterm 1 Pq Pa ports/x11/xterm .
Двоичные файлы SGID могут быть почти такими же опасными.
Если злоумышленнику удастся взломать двоичный файл SGID-kmem, он сможет прочитать файл
.Pa /dev/kmem
и, таким образом, прочитать зашифрованный файл паролей, потенциально
взломать любую учетную запись с паролем.
В качестве альтернативы злоумышленник, взломавший группу
.Dq Li kmem
может отслеживать нажатия клавиш, отправленные с помощью PTYS,
включая PTYS, используемые пользователями, которые входят в систему
с помощью защищенных методов.
Злоумышленник, взломавший группу
.Dq Li tty
может выполнить запись практически в TTY любого пользователя.
Если пользователь
запускает программу терминала или эмулятор с функцией имитации клавиатуры,
злоумышленник потенциально может сгенерировать поток данных,
который заставит терминал пользователя повторить команду,
которая затем будет запущена от имени этого пользователя.
.Sh ЗАЩИТА УЧЕТНЫХ ЗАПИСЕЙ ПОЛЬЗОВАТЕЛЕЙ
Учетные записи пользователей, как правило, труднее всего защитить. Хотя вы можете ввести драконовские ограничения на доступ для своих сотрудников и узнать их
пароли, возможно, вы не сможете сделать это с обычными учетными записями пользователей, которые у вас могут быть. Если у вас есть достаточный контроль, вы можете выиграть
и сможете должным образом защитить учетные записи пользователей. Если нет, вам просто нужно быть более бдительным при мониторинге этих учетных записей. Использование
SSH и Kerberos для учетных записей пользователей более проблематично из-за необходимости дополнительного администрирования и технической поддержки, но все же это очень хороший способ.
решение по сравнению с зашифрованным файлом паролей.
.Sh ЗАЩИТА ФАЙЛА ПАРОЛЕЙ
Единственный верный способ - это ввести как можно больше
паролей и использовать SSH или Kerberos для доступа к этим
учетным записям. Несмотря на то, что зашифрованный файл паролей
.Pq Pa /etc/spwd.db
может быть прочитан только пользователем root,
злоумышленник может получить доступ на чтение к этому файлу,
даже если он не может получить доступ на запись с правами root.
.Pp
Ваши сценарии безопасности должны всегда проверять наличие изменений в файле паролей и сообщать о них
(см. раздел "ПРОВЕРКА ЦЕЛОСТНОСТИ ФАЙЛА" ниже).
.Sh ЗАЩИТА ЯДРА, НЕОБРАБОТАННЫХ УСТРОЙСТВ И ФАЙЛОВЫХ СИСТЕМ
Если злоумышленник взломает root, он может сделать практически все, что угодно, но есть определенные удобства.
Например, в большинство современных ядер
встроен драйвер устройства отслеживания пакетов.
Во 
.Fx
это называется устройством
.Xr bpf 4 .
Злоумышленник обычно пытается запустить анализатор
пакетов на взломанном компьютере.
Вам не нужно предоставлять злоумышленнику соответствующие возможности,
и в большинстве систем не должно быть скомпилированного устройства
.Xr bpf 4 .
.Pp
о даже если вы отключите устройство
.Xr bpf 4 ,
у вас все равно останутся файлы
.Pa /dev/mem
и
.Pa /dev/kmem
о которых стоит беспокоиться.
Если на то пошло, злоумышленник все равно
может записывать данные на устройства с необработанным диском.
роме того, в ядре есть еще одна функция, называемая загрузчиком модулей,
.Xr kldload 8 .
Предприимчивый злоумышленник может использовать модуль
KLD для установки своего собственного устройства
.Xr bpf 4
или другого устройства отслеживания в работающем ядре.
Чтобы избежать этих проблем, вы должны запустить ядро с более высоким уровнем безопасности, по крайней мере, с уровнем 1.
Уровень безопасности можно задать с помощью
.Xr sysctl 8
в переменной
.Va kern.securelevel .
Как только вы
если вы установили уровень безопасности равным 1, доступ на запись к необработанным устройствам будет запрещен и будут установлены специальные флаги
.Xr chflags 1
такие как
.Cm schg .
Вы также должны убедиться, что флаг
.Cm schg
установлен для критически важных двоичных файлов запуска, каталогов и файлов сценариев - всего, что запускается до уровня, на котором установлен уровень безопасности.
Это может привести к перегибу,
и обновить систему будет намного сложнее, если вы будете работать на более высоком уровне безопасности.
Вы можете скомпрометировать систему и запустить ее с более высоким уровнем безопасности, но не устанавливать флаг
.Cm schg
ля каждого системного файла и каталога в сети.
Другой возможностью является простое подключение
и доступ к
.Pa /
и
.Pa /usr
только для чтения.
Следует отметить, что слишком жесткие меры в отношении того, что вы пытаетесь защитить, могут помешать обнаружению
вторжения.
.Pp
Ядро работает с пятью различными уровнями безопасности. Любой суперпользовательский
процесс может повысить уровень, но ни один процесс не может его понизить. Уровни безопасности
следующие:
.Bl -tag -width flag
.It Ic -1
Постоянно небезопасный режим - всегда запускайте систему в небезопасном
режиме. Это начальное значение по умолчанию.
.It Ic 0
Небезопасный режим - флаги "неизменяемый" и "только для добавления" могут быть отключены. Чтение и запись с любых устройств возможны в зависимости от их разрешений.
.It Ic 1
езопасный режим \- флаги system immutable и system append-only
не могут быть отключены;
диски для подключенных файловых систем,
.Pa /dev/mem
и
.Pa /dev/kmem
могут быть закрыты для записи;
.Pa /dev/io
(если он есть на вашей платформе) может вообще не открываться;
модули ядра (см.
.Xr kld 4 )
может быть не загружен или не выгружен.
Отладчик ядра не может быть введен с помощью
.Va debug.kdb.enter
sysctl если политика
.Xr MAC 9
не предоставляет доступ, например, с помощью
.Xr mac_ddb 4 .
Панику или trap невозможно вызвать с помощью
.Va debug.kdb.panic ,
.Va debug.kdb.panic_str
других системных команд.
.It Ic 2
Режим повышенной безопасности - аналогично безопасному режиму, плюс диски могут быть открыты для записи (исключая
.Xr mount 2 )
независимо от того, подключены они или нет.
Этот уровень исключает вмешательство в файловые системы путем их размонтирования, но также препятствует запуску
.Xr newfs 8 ,
когда система является многопользовательской.
.Pp
Кроме того, время, изменяемое ядром, ограничено временем, меньшим или равным одной секунде.
При попытке изменить время более чем на это значение в журнал будет внесено сообщение
.Dq Корректировка времени установлена на +1 секунду .
.It Ic 3
Безопасный режим сети \- такой же, как и режим повышенной безопасности, плюс
правила фильтрации IP-пакетов (см.
.Xr ipfw 8 ,
.Xr ipfirewall 4
и
.Xr pfctl 8 )
нельзя
изменить, а конфигурацию
.Xr dummynet 4
или
.Xr pf 4
нельзя скорректировать.
.El
.Pp
Уровень безопасности можно настроить с помощью переменных, задокументированных в
.Xr rc.conf 5 .
.Sh ПРОВЕРКА ЦЕЛОСТНОСТИ ФАЙЛОВ: ДВОИЧНЫХ ФАЙЛОВ, КОНФИГУРАЦИОННЫХ ФАЙЛОВ И Т.Д
Когда дело доходит до этого, вы можете защитить конфигурацию своей основной системы и управляющие файлы только до тех пор, пока фактор удобства
не поднимет свою уродливую голову.
Например, использование
.Xr chflags 1
для установки бита
.Cm schg
для большинства файлов в
.Pa /
и
.Pa /usr
вероятно, контрпродуктивно, поскольку, хотя это может защитить файлы, оно также закрывает
окно обнаружения.
Последний уровень вашей системы безопасности, пожалуй, самый важный - обнаружение. Остальная часть вашей системы безопасности практически бесполезна
((или, что еще хуже, создает у вас ложное чувство безопасности), если вы не можете обнаружить потенциальное вторжение.
Половина работы onion заключается в том, чтобы замедлить
атакующего, а не остановить его, чтобы дать возможность уровню обнаружения поймать его на месте преступления.
.Pp
Лучший способ обнаружить вторжение - это поиск измененных, отсутствующих или непредвиденных файлов. Лучший способ найти измененные файлы
- это использовать другую (часто централизованную) систему с ограниченным доступом. Написание ваших сценариев безопасности в сверхзащищенной системе ограниченного доступа
делает их практически невидимыми для потенциальных злоумышленников, и это важно. Чтобы воспользоваться максимальными преимуществами, вам, как правило, необходимо предоставить блоку с ограниченным доступом значительный доступ к другим компьютерам в бизнесе, обычно либо путем экспорта других компьютеров из NFS только для чтения в
блок ограниченного доступа или путем настройки пар ключей SSH, позволяющих блоку ограничивать доступ к другим компьютерам по SSH.
За исключением сетевого
трафика, NFS является наименее заметным методом \(em позволяющим отслеживать файловые системы на каждом клиентском блоке практически незамеченным.
Если ваш сервер с ограниченным доступом подключен к клиентским блокам через концентратор или через несколько сетевых-
из-за маршрутизации метод NFS может быть слишком небезопасным (с точки зрения сети), и использование SSH может быть лучшим выбором, даже учитывая контрольные записи, которые прокладывает
SSH.
.Pp
ак только вы предоставите блоку ограничения доступа хотя бы доступ на чтение к клиентским
системам, которые он должен отслеживать,
вы должны написать сценарии для выполнения фактического мониторинга.
При подключении к NFS вы можете писать сценарии с помощью
простых системных утилит, таких как
.Xr find 1
и
.Xr md5 1 .
Лучше всего выполнять физическую проверку файлов клиентского ящика
.Xr md5 1
не реже одного раза в день, а еще чаще тестировать управляющие файлы,
такие как те, что находятся в
.Pa /etc
и
.Pa /usr/local/etc .
огда обнаруживаются несоответствия с базовой информацией MD5, которая, по мнению компьютера с ограниченным доступом, является достоверной,
он должен обратиться к системному администратору с просьбой проверить это. 
Хороший сценарий безопасности также проверит наличие неподходящих двоичных
файлов SUID и новых или удаленных файлов в системных разделах, таких как
.Pa /
и
.Pa /usr .
.Pp
При использовании SSH, а не NFS, написание сценария безопасности намного сложнее.
По сути, вам нужно
.Xr scp 1
перенести скрипты в клиентское окно, чтобы запустить их и сделать видимыми,
и для обеспечения безопасности вам также необходимо
.Xr scp 1
поместить двоичные файлы (например,
.Xr find 1 ),
оторые
используются этими скриптами.
Возможно,
.Xr sshd 8
в клиентском окне уже взломан.
В целом, использование SSH может быть необходимым при работе
по незащищенным ссылкам, но с ним также намного сложнее справиться.
.Pp
Хороший сценарий безопасности также будет проверять наличие изменений в
файлах конфигурации доступа пользователей и сотрудников:
.Pa .rhosts , .shosts , .ssh/authorized_keys
и т.д., файлах, которые могут выходить за рамки проверки MD5.
.Pp
Если у вас большой объем пользовательского дискового пространства, просмотр каждого файла на этих разделах может занять слишком много времени. В этом случае рекомендуется установить
флаги монтирования, запрещающие использование двоичных файлов SUID на этих разделах.
Параметр
.Cm nosuid
(см.
.Xr mount 8 )
это то, на что вам нужно обратить внимание.
Я бы все равно просматривал их как минимум раз в неделю, поскольку цель
этого слоя - обнаружить взлом независимо от того, эффективен взлом или нет.
.Pp
Учет процессов
(см.
.Xr accton 8 )
это функция операционной системы с относительно низкими затратами,
которую я рекомендую использовать в качестве механизма оценки после взлома.
Это особенно полезно для отслеживания того, как злоумышленник на самом деле проник в систему,
предполагая, что файл все еще остается нетронутым после взлома.
.Pp
Наконец, сценарии безопасности должны обрабатывать файлы журналов,
а сами журналы должны создаваться максимально безопасным способом \(em удаленный
системный журнал может быть очень полезен.
Злоумышленник пытается замести следы,
и файлы журналов имеют решающее значение для системного администратора, пытающегося отследить время и способ первоначального взлома. Одним из способов ведения постоянной записи файлов журнала является подключение системной консоли к последовательному порту
и постоянный сбор информации с помощью защищенного компьютера, осуществляющего мониторинг консолей.
.Sh ПАРАНОЯ
Немного паранойи никогда не помешает. Как правило,
системный администратор может добавить любое количество функций безопасности,
если они не влияют на удобство, и может добавить функции безопасности,
которые влияют на удобство, если немного подумать.
Что еще более важно, администратору системы безопасности следует немного
запутаться \(em если вы дословно используете рекомендации,
подобные приведенным на этой странице руководства,
вы выдаете свои методики потенциальному злоумышленнику,
который также имеет доступ к этой странице руководства.
.Sh СПЕЦИАЛЬНЫЙ РАЗДЕЛ, ПОСВЯЩЕННЫЙ DoS-АТАКАМ
В этом разделе рассматриваются атаки типа "Отказ в обслуживании".
DoS-атака, как правило, представляет собой пакетную атаку.
Хотя вы мало что можете сделать с современными
атаками с использованием поддельных пакетов, которые наводняют вашу сеть,
вы, как правило, можете ограничить ущерб, гарантируя,
что атаки не смогут вывести из строя ваши серверы.
.Bl -enum -offset indent
.It
Ограничение форков сервера
.It
Ограничение атак с использованием плацдарма (атаки с ответом ICMP, ping, рассылка и т.д.)
.It
Кэширование маршрутов ядра
.El
.Pp
Распространенная DoS-атака направлена против разветвленного сервера,
который пытается заставить сервер использовать процессы,
файловые дескрипторы и память до тех пор, пока компьютер не выйдет из строя. 
Сервер
.Xr inetd 8
имеет несколько возможностей для ограничения такого рода атак.
Следует отметить, что, хотя можно предотвратить сбой в работе компьютера,
как правило, невозможно предотвратить сбой в работе службы в результате атаки.
Внимательно прочитайте страницу руководства
.Xr inetd 8
и обратите особое внимание на опции
.Fl c , C ,
и
.Fl R .
Обратите внимание, что при атаках с использованием поддельного IP-адреса параметр
.Fl C
не используется в
.Xr inetd 8 ,
поэтому обычно необходимо использовать комбинацию параметров.
Некоторые автономные серверы имеют параметры ограничения самофоркинга.
.Pp
У
.Xr sendmail 8
есть опция
.Fl OMaxDaemonChildren
которая, как правило, работает намного лучше,
чем попытка использовать параметры ограничения загрузки в
.Xr sendmail 8 Ns 's
из-за задержки загрузки.
Вам следует указать параметр
.Va MaxDaemonChildren
при запуске
.Xr sendmail 8
достаточный для того, чтобы справиться с ожидаемой нагрузкой, 
но не настолько высокий,
чтобы компьютер не смог обработать такое количество сообщений
.Nm sendmail Ns 's
без сбоев в работе.
Также целесообразно запускать
.Xr sendmail 8
в режиме
.Dq очереди
.Pq Fl ODeliveryMode=queued
и запускать
.Pq Dq Nm sendmail Fl bd
отдельно от запуска в очереди
.Pq Dq Nm sendmail Fl q15m .
Если вам все еще нужна доставка в режиме реального времени,
вы можете запустить очередь с гораздо меньшим интервалом, например, с помощью
.Fl q1m ,
но обязательно укажите приемлемый параметр
.Va MaxDaemonChildren
для этого
.Xr sendmail 8 ,
чтобы предотвратить каскадные сбои.
.Pp
.Xr syslogd 8
может быть атакован напрямую, и настоятельно рекомендуется использовать параметр
.Fl s
когда это возможно, и параметр
.Fl a
в противном случае.
.Pp
Вы также должны быть достаточно осторожны с сервисами обратного подключения,
такими как tcp-wrappers reverse-identd, которые могут быть атакованы напрямую.
По этой причине обычно не рекомендуется использовать
функцию обратной идентификации tcp-wrappers.
.Pp
Очень хорошей идеей является защита внутренних служб от внешнего доступа
с помощью брандмауэра на ваших пограничных маршрутизаторах.
Идея здесь заключается в предотвращении атак по насыщению из-за
пределов вашей локальной сети, а не в защите внутренних служб от
сетевой компрометации root. Всегда настраивайте эксклюзивный брандмауэр, т.е.,
.So
брандмауэр для всего,
.Em кроме
портов A, B, C, D, and M-Z
.Sc .
Таким образом, вы можете отключить брандмауэром все свои нижние порты,
за исключением определенных служб, таких как
.Xr talkd 8 ,
.Xr sendmail 8 ,
 других служб, доступных через Интернет.
Если вы попытаетесь настроить брандмауэр по-другому \(em как включающий
или разрешающий брандмауэр, есть большая вероятность, что вы забудете
.Dq закрыть
пару служб или добавите новую внутреннюю службу и забудете обновить брандмауэр.
Вы по-прежнему можете открыть диапазон портов с высокими номерами в брандмауэре,
чтобы разрешить работу в режиме разрешений без ущерба для ваших портов
с низкими номерами. Также обратите внимание, что
.Fx
позволяет вам контролировать диапазон номеров портов,
используемых для динамической привязки, с помощью различных системных интерфейсов
.Va net.inet.ip.portrange
sysctl's
.Pq Dq Li "sysctl net.inet.ip.portrange" ,
что также может упростить настройку вашего брандмауэра.
Обычно я использую обычный диапазон от первого до последнего от 4000 до 5000 и диапазон hiport от 49152 до 65535, а затем отключаю все, что меньше 4000, в моем
брандмауэр (за исключением, конечно, определенных портов, доступных через Интернет).
.Pp
Другая распространенная DoS-атака называется springboard attack \(em атака на
сервер таким образом, что сервер генерирует ответы, которые затем перегружают сервер,
локальную сеть или какой-либо другой компьютер.
Наиболее распространенной атакой такого рода является
широковещательная атака ICMP PING. Злоумышленник подделывает ping-пакеты,
отправляемые в широковещательную сеть вашей локальной сети
адрес с исходным IP-адресом, установленным на фактическую машину,
которую они хотят атаковать. Если ваши пограничные маршрутизаторы
не настроены на передачу ping на широковещательные адреса,
ваша локальная сеть в конечном итоге генерирует ответы, 
достаточные для получения поддельного исходного адреса,
чтобы насытить жертву, особенно когда злоумышленник использует один
и тот же трюк для нескольких десятков широковещательных
адресов в нескольких десятках разных сетей одновременно. 
Были зафиксированы широковещательные атаки на скорости
более ста двадцати мегабит. Asec-
наиболее распространенной атакой с использованием
springboard является атака на систему сообщений об ошибках ICMP.
Создавая пакеты, которые генерируют ответы об ошибках ICMP,
злоумышленник может заполнить входящую сеть сервера и
заставить сервер заполнять свою исходящую сеть ответами ICMP.
Этот тип атаки также может привести к аварийному завершению
работы сервера из-за нехватки mbuf-файлов,
особенно если сервер не может обработать ответы ICMP,
которые он генерирует достаточно быстро.
В ядре
.Fx
появилась новая опция компиляции ядра, называемая
.Dv ICMP_BANDLIM
что ограничивает эффективность подобных атак.
Последний крупный класс атак springboard связан с определенными внутренними службами
.Xr inetd 8
такими как служба UDP echo. Злоумышленник просто
подделывает UDP-пакет, при этом адресом источника является эхо-порт сервера A, а адресом назначения - эхо-порт сервера B, где сервер
и B находятся в вашей локальной сети.
Затем два сервера передают этот пакет друг другу и обратно. Злоумышленник может перегрузить
как серверы, так и их локальные сети,
просто отправив несколько пакетов таким образом. 
Аналогичные проблемы возникают с внутренним портом загрузки.
Компетентный системный администратор отключит все эти службы
внутреннего тестирования
.Xr inetd 8 Ns -internal .
.Sh ПРОБЛЕМЫ С ДОСТУПОМ С ПОМОЩЬЮ KERBEROS И SSH
Как с Kerberos, так и с SSH есть несколько проблем, которые необходимо решить,
если вы собираетесь их использовать.
Kerberos5 отличный протокол аутентификации, но керберизованный
.Xr telnet 1
отстой.
Существуют
ошибки, которые делают их непригодными для работы с двоичными потоками.
Кроме того, по умолчанию Kerberos не шифрует сеанс,
если вы не используете опцию
.Fl x .
По умолчанию SSH шифрует все.
.Pp
SSH работает достаточно хорошо во всех отношениях, за исключением тех случаев, когда он настроен на пересылку ключей шифрования. Это означает, что если у вас есть защищенная
рабочая станция, на которой хранятся ключи, дающие вам доступ к остальной системе, и вы подключаетесь по
.Xr ssh 1
к незащищенной машине, ваши ключи становятся открытыми.
Сами ключи не раскрываются, но
.Xr ssh 1
устанавливает порт переадресации на время вашего входа в систему, и если злоумышленник взломал root на незащищенной машине, он может использовать этот порт для использования ваших
ключей для получения доступа к любой другой машине, которую разблокируют ваши ключи.
.Pp
Мы рекомендуем по возможности использовать SSH в сочетании с Kerberos
для входа сотрудников в систему. SSH может быть скомпилирован с поддержкой Kerberos.
Это снижает вашу зависимость от потенциально доступных SSH-ключей и в то же
время защищает пароли с помощью Kerberos. SSH-ключи должны быть только
может использоваться для автоматизированных задач с
защищенных компьютеров (то, к чему не подходит Kerberos).
Мы также рекомендуем вам либо отключить переадресацию ключей в
конфигурации SSH, либо использовать параметр 
.Va from Ns = Ns Ar IP/DOMAIN
который SSH разрешает в своем файле
.Pa authorized_keys
чтобы сделать ключ доступным только для лиц, входящих в систему с определенных компьютеров.
.Sh РЕГУЛЯТОРЫ И НАСТРОЙКИ
.Fx
предоставляет несколько регуляторов и настроек,
которые делают доступ к некоторой информации для самоанализ
 более ограниченным. Некоторые пользователи считают, что это
повышает безопасность системы, поэтому здесь кратко перечислены регуляторы,
а также элементы управления, которые позволяют снизить вероятность
утечки информации о состоянии оборудования.
.Pp
Описанные ниже настройки sysctl для аппаратного обеспечения,
описанные ниже, были перенесены в
.Pa machdep.mitigations ,
с помощью оболочек обратной совместимости для принятия
существующих имен. Будущие изменения позволят упорядочить смысл отдельных системных списков
(чтобы значение enabled / true всегда указывало на то, что функция смягчения активна).
По этой причине предыдущие названия остаются
каноническим способом настройки мер смягчения и описаны здесь.
Ограничения обратной совместимости для промежуточного sysctl в
.Pa machdep.mitigations
по устранению неполадок добавлены не будут.
.Bl -tag -width security.bsd.unprivileged_proc_debug
.It Dv security.bsd.see_other_uids
Управляет видимостью и доступностью субъектов (например, процессов)
и объектов (например, сокетов), принадлежащих другому uid.
Регулятор напрямую влияет на фильтрацию данных в
.Dv kern.proc
что приводит к ограничению вывода таких утилит, как
.Xr ps 1 .
.It Dv security.bsd.see_other_gids
То же самое для субъектов и объектов, принадлежащих другому gid.
.It Dv security.bsd.see_jail_proc
То же самое относится к предметам и объектам, принадлежащим другой тюрьме, включая дополнительные тюрьмы.
.It Dv security.bsd.conservative_signals
Если этот параметр включен, непривилегированным пользователям разрешается отправлять
только сигналы управления заданиями и обычные сигналы завершения, такие как
.Dv SIGKILL ,
.Dv SIGINT ,
и
.Dv SIGTERM ,
процессам, выполняющим программы с измененными идентификаторами uid.
.It Dv security.bsd.unprivileged_proc_debug
Контролирует доступность средств отладки процесса для пользователей, не имеющих прав root.
Смотрите также трассировку
.Xr proccontrol 1
режима
.Dv trace .
.It Dv vm.pmap.pti
Настраиваемый,
только для amd64.
Включает режим работы системы виртуальной памяти, в котором таблицы страниц
пользовательского режима обрабатываются для предотвращения так называемой утечки информации
в результате сбоя на некоторых процессорах Intel. При устранении неисправности система определяет, требуется ли
процессору обходной путь, и автоматически включает его.
Смотрите также 
.Xr proccontrol 1
режим
.Dv kpti .
.It Dv machdep.mitigations.flush_rsb_ctxsw
amd64.
Управляет очисткой буфера стека при переключении контекста,
чтобы предотвратить межпроцессные атаки ret2spec. Требуется и
включается только по умолчанию, если компьютер поддерживает SMEP,
в противном случае IBRS все равно выполнит необходимую очистку при входе в ядро.
.It Dv hw.mds_disable
amd64 and i386.
Управляет аппаратным обеспечением для отбора проб микроархитектурных данных, предотвращая утечку информации.
.It Dv hw.spec_store_bypass_disable
amd64 and i386.
amd64 и i386. Управляет предотвращением утечки информации об аппаратном
обеспечении для обхода спекулятивного хранилища.
.It Dv hw.ibrs_disable
amd64 and i386.
Контролирует предотвращение утечки информации об аппаратном
обеспечении с ограниченным доступом к косвенным ответвлениям.
.It Dv machdep.syscall_ret_flush_l1d
amd64.
Управляет принудительной очисткой кэша L1D при возврате из системного вызова,
который сообщает об ошибках, отличных от
.Ev EEXIST ,
.Ev EAGAIN ,
.Ev EXDEV ,
.Ev ENOENT ,
.Ev ENOTCONN ,
и
.Ev EINPROGRESS .
В основном это параноидальная настройка,
добавленная для предотвращения гипотетического использования
неизвестных устройств для решения неизвестных аппаратных проблем.
Список исключений кодов ошибок состоит из наиболее распространенных ошибок,
которые обычно возникают при нормальной работе системы.
.It Dv machdep.nmi_flush_l1d_sw
amd64.
Управляет принудительной очисткой кэша L1D в NMI;
это обеспечивает программную поддержку для предотвращения
утечки информации о неисправном оборудовании терминала L1.
.It Dv hw.vmm.vmx.l1d_flush
amd64.
Управляет устранением неисправности терминала L1 в гипервизоре bhyve.
.It Dv vm.pmap.allow_2m_x_ept
amd64.
Позволяет использовать суперстраницы для сопоставления исполняемых
файлов в формате таблицы страниц EPT, используемом гипервизорами
на процессорах Intel для сопоставления физического адресного пространства
гостя с физической памятью компьютера.
Может быть отключен для устранения ошибки процессора,
называемой машинной проверкой во избежание ошибок при
изменении размера страницы.
.It Dv machdep.mitigations.rngds.enable
amd64 and i386.
Управляет уменьшением выборки данных из специального буфера
регистровпо сравнению с оптимизацией доступа к микроконтроллеру.
Если значение равно нулю, смягчение отключено,
и инструкции RDSEED и RDRAND не требуют дополнительных затрат
на сериализацию для доступа к общему буферу и не сериализуют
доступ к памяти вне ядра.
.It Dv kern.elf32.aslr.enable
Система управления рандомизацией расположения в глобальном адресном пространстве (ASLR) for
для обычных 32-разрядных двоичных файлов ELF,
не связанных с PIE (позиционно-независимым исполняемым файлом).
Смотрите также
.Xr proccontrol 1
режим
.Dv aslr ,
на который также влияет флажок "Управление для каждого изображения".
.It Dv kern.elf32.aslr.pie_enable
Система управления -рандомизация расположения глобального адресного
пространства для 32-разрядных двоичных файлов, 
не зависящих от местоположения (POE).
.It Dv kern.elf32.aslr.honor_sbrk
Делает ASLR менее агрессивным и более совместимым со
старыми двоичными файлами, используя область sbrk.
.It Dv kern.elf32.aslr.stack
Если ASLR включен для двоичного файла,
ненулевое значение позволяет рандомизировать стек.
В противном случае стек отображается в фиксированном местоположении,
определяемом процессом ABI.
.It Dv kern.elf64.aslr.enable
Управление ASLR для 64-разрядных двоичных файлов ELF.
.It Dv kern.elf64.aslr.pie_enable
Управление ASLR для 64-разрядных интерфейсов ELF.
.It Dv kern.elf64.aslr.honor_sbrk
Контроль совместимости ASLR sbrk для 64-разрядных двоичных файлов.
.It Dv kern.elf64.aslr.stack
Управляет рандомизацией адресов стека для 64-разрядных двоичных файлов.
.It Dv kern.elf32.nxstack
Включает неисполняемый стек для 32-разрядных процессов.
Включен по умолчанию, если поддерживается аппаратным обеспечением
и соответствующим двоичным файлом.
.It Dv kern.elf64.nxstack
Включает неисполняемый стек для 64-разрядных процессов.
.It Dv kern.elf32.allow_wx
Позволяет сопоставлять одновременно доступные для записи и
исполняемые страницы для 32-разрядных процессов.
.It Dv kern.elf64.allow_wx
Позволяет сопоставлять одновременно доступные для записи и
исполняемые страницы для 64-разрядных процессов.
.El
.Sh СМОТРИТЕ ТАКЖЕ
.Xr chflags 1 ,
.Xr find 1 ,
.Xr md5 1 ,
.Xr netstat 1 ,
.Xr openssl 1 ,
.Xr proccontrol 1 ,
.Xr ps 1 ,
.Xr ssh 1 ,
.Xr xdm 1 Pq Pa ports/x11/xorg-clients ,
.Xr group 5 ,
.Xr ttys 5 ,
.Xr mitigations 7 ,
.Xr accton 8 ,
.Xr init 8 ,
.Xr sshd 8 ,
.Xr sysctl 8 ,
.Xr syslogd 8 ,
.Xr vipw 8
.Sh ИСТОРИЯ
Страница руководства
.Nm
была первоначально написана
.An Matthew Dillon
и впервые появилась в
.Fx 3.1 ,
Декабрь 1998.
