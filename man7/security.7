.\" Copyright (C) 1998 Matthew Dillon. All rights reserved.
.\" Copyright (c) 2019 The FreeBSD Foundation, Inc.
.\"
.\" Parts of this documentation were written by
.\" Konstantin Belousov <kib@FreeBSD.org> under sponsorship
.\" from the FreeBSD Foundation.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd October 5, 2023
.Dt SECURITY 7
.Os
.Sh ИМЯ
.Nm security
.Nd введение в безопасность во FreeBSD
.Sh ОПИСАНИЕ
Безопасность - это функция, которая начинается и заканчивается системным администратором.
Хотя все
.Bx
многопользовательские системы имеют некоторую встроенную безопасность, работа по созданию и поддержке дополнительных механизмов безопасности, чтобы удержать пользователей
создание и поддержка дополнительных механизмов безопасности для обеспечения честности пользователей
.Dq honest
вероятно
одна из самых больших задач системного администратора.
Машины
настолько безопасны, насколько вы их делаете, а забота о безопасности постоянно конкурирует
с человеческой потребностью в удобстве.
.Ux
системы,
в целом, способны выполнять огромное количество одновременных процессов
и многие из этих процессов работают как серверы \(em, что означает, что внешние
что означает, что внешние объекты могут подключаться к ним и разговаривать с ними.
По мере того как вчерашние мини-компьютеры и мэйнфреймы
превращаются в настольные компьютеры, а компьютеры становятся сетевыми и интернет-соединениями,
безопасность становится все более актуальной проблемой.
.Pp
Безопасность лучше всего обеспечивать с помощью многоуровневого onion approach.
В двух словах,
нужно создать столько уровней безопасности, сколько удобно.
а затем тщательно контролировать систему на предмет вторжений.
.Pp
Безопасность системы также связана с борьбой с различными формами атак,
включая атаки, которые пытаются вывести систему из строя или иным образом сделать ее непригодной для использования
но не пытаются взломать root.
Проблемы безопасности можно разделить на
несколько категорий:
.Bl -enum -offset indent
.It
Атаки типа "отказ в обслуживании" (DoS)
.It
Компрометация учетных записей пользователей
.It
Компрометация корневой системы через доступные серверы
.It
Компрометация корневой системы через учетные записи пользователей
.It
Создание Backdoor
.El
.Pp
Атака типа "отказ в обслуживании" - это действие, лишающее машину необходимых
ресурсов.
Как правило, DoS-атаки представляют собой механизмы грубой силы, которые пытаются
вывести машину из строя или иным образом сделать ее непригодной для использования, перегружая ее серверы или
сетевого стека.
Некоторые DoS-атаки пытаются воспользоваться ошибками в
сетевом стеке, чтобы вывести машину из строя одним пакетом.
Последние могут
можно исправить только путем применения исправления ошибок в ядре.
Атаки на серверы можно
часто можно исправить, правильно указав параметры, ограничивающие нагрузку на серверы
при неблагоприятных условиях.
С сетевыми атаками грубой силы справиться сложнее.
Например, атаку с подмененными пакетами
практически невозможно остановить, если не отключить вашу систему от Интернета.
Возможно, она не сможет вывести ваш компьютер из строя, но она может заполнить вашу интернет
трубу.
.Pp
Средства безопасности всегда должны быть многоуровневыми
.Dq onion peel
и могут быть классифицированы следующим образом:
.Bl -enum -offset indent
.It
Защита учетных записей root и персонала
.It
Защита серверов с правами root \(em root-run и исполняемых файлов SUID/SGID
.It
Защита учетных записей пользователей
.It
Защита файла паролей
.It
Защита ядра ядра, необработанных устройств и файловых систем
.It
Быстрое обнаружение несоответствующих изменений, внесенных в систему
.It
Paranoia
.El
.Sh ЗАЩИТА КОРНЕВОГО АККАУНТА И ЗАЩИТА УЧЕТНЫХ ЗАПИСЕЙ СОТРУДНИКОВ
Не пытайтесь защитить учетные записи сотрудников, если вы не защитили корневую учетную запись
учетную запись.
В большинстве систем на учетную запись root назначается пароль.
На
первое, что вы сделаете, это предположите, что пароль
всегда
скомпрометирован.
Это не означает, что вы должны удалить пароль.
Пароль
пароль почти всегда необходим для консольного доступа к машине.
Это означает, что не следует делать возможным использование пароля
вне консоли или, возможно, даже с помощью утилиты
.Xr su 1 .
Например, убедитесь, что ваши PTY указаны как
.Dq Li insecure
в файле
.Pa /etc/ttys ,
чтобы прямой вход в систему через
.Xr telnet 1
был запрещен.
При использовании
других служб входа в систему, таких как
.Xr sshd 8 ,
убедитесь, что прямой вход в систему root
запрещены и там.
Рассмотрите каждый метод доступа \(em такие службы, как
.Xr ftp 1
часто остаются незамеченными.
Прямой вход в систему root должен быть разрешен только
только через системную консоль.
.Pp
Конечно, как системный администратор вы должны иметь возможность получить права root, поэтому мы открываем
несколько дыр.
Но мы позаботимся о том, чтобы эти дыры требовали дополнительной проверки пароля
для работы.
Один из способов сделать root доступным - добавить соответствующие
учетные записи сотрудников в
.Dq Li wheel
группу (в
.Pa /etc/group ) .
Сотрудники, помещенные в группу
.Li wheel
разрешается
.Xr su 1
для root.
Вы никогда не должны давать сотрудникам
сотрудникам
.Li wheel
вставляя их в
.Li wheel
при вводе пароля.
Учетные записи сотрудников должны быть помещены в группу
.Dq Li staff
а затем добавить в группу
.Li wheel
через
.Pa /etc/group
файл.
Только те сотрудники, которым действительно необходим доступ root
должны быть помещены в группу
.Li wheel
группу.
Также можно использовать
метода аутентификации, такого как Kerberos, использовать группу Kerberos
.Pa .k5login
в учетной записи root, чтобы разрешить
.Xr ksu 1
получить права root без необходимости помещать кого-либо в
.Li wheel
группу.
Этот
может быть лучшим решением, поскольку
.Li wheel
все еще позволяет
взломать root, если злоумышленник завладел вашим файлом паролей
и сможет проникнуть в учетную запись сотрудника.
Хотя наличие
.Li wheel
механизм
лучше, чем вообще ничего не иметь, это не обязательно самый безопасный
вариант.
.Pp
Косвенным способом защиты учетной записи root является защита учетных записей сотрудников
используя альтернативный метод доступа и *'ing из криптографического пароля
для учетных записей сотрудников.
Таким образом, злоумышленник сможет украсть файл паролей
файл, но не сможет проникнуть в учетные записи сотрудников или root, даже если
root имеет криптографический пароль, связанный с ним (при условии, конечно, что
что у вас есть ограниченный доступ root к консоли).
Сотрудники
получают доступ к своим учетным записям с помощью безопасного механизма входа, такого как
.Xr kerberos 8
или
.Xr ssh 1
с использованием пары приватный/публичный
пары ключей.
Когда вы используете что-то вроде Kerberos, вы, как правило, должны обеспечить безопасность
машины, на которых работают серверы Kerberos, и вашу настольную рабочую станцию.
При использовании пары открытый/закрытый ключ в SSH, как правило, необходимо защитить
машину, на которой вы входите в систему
.Em с
(обычно это ваша рабочая станция),
но вы можете
добавить дополнительный уровень защиты к паре ключей, защитив паролем
защитив паролем пару ключей при ее создании с помощью
.Xr ssh-keygen 1 .
Возможность
возможность блокировать пароли для учетных записей сотрудников также гарантирует, что сотрудники
сотрудники смогут входить в систему только с помощью настроенных вами безопасных методов доступа.
Вы можете
таким образом заставить всех сотрудников использовать безопасные, зашифрованные соединения для
все свои сеансы, что закрывает важную брешь, используемую многими злоумышленниками, а именно
прослушивание сети с другой, менее защищенной машины.
.Pp
Более косвенные механизмы безопасности также предполагают, что вы входите в систему
с более строгого сервера на менее строгий сервер.
Например,
если на вашей основной машине запущены всевозможные серверы, на вашей рабочей станции не должно быть
ни один из них.
Для того чтобы ваша рабочая станция была достаточно безопасной
вы должны запускать как можно меньше серверов, вплоть до полного отсутствия серверов
и использовать защищенный паролем экран.
Конечно, имея физический доступ к
рабочей станции, злоумышленник может сломать любую защиту, которую вы на нее установите.
Эту проблему, безусловно, следует учитывать, но также следует
учитывать тот факт, что подавляющее большинство взломов происходит удаленно, по
по сети, от людей, у которых нет физического доступа к вашей рабочей станции или
серверам.
.Pp
Использование Kerberos также дает вам возможность отключить или
изменить пароль для учетной записи сотрудника в одном месте, и это немедленно
это немедленно отразится на всех машинах, на которых у этого сотрудника есть учетная запись.
Если учетная запись сотрудника
Если учетная запись сотрудника будет взломана, возможность мгновенно изменить его
Если учетная запись сотрудника будет взломана, возможность мгновенно изменить пароль на всех машинах не стоит недооценивать.
При использовании дискретных паролей смена пароля на N машинах может стать непростой задачей.
Вы также можете наложить
ограничения на повторную запись пароля в Kerberos: билет Kerberos можно не только
можно не только сделать так, чтобы билет Kerberos через некоторое время перестал действовать, но система Kerberos может потребовать, чтобы
чтобы пользователь выбирал новый пароль через определенный период времени
(скажем, раз в месяц).
.Sh БЕЗОПАСНОСТЬ ROOT \(em ROOT-RUN СЕРВЕРОВ И SID/SGID BINARY
Благоразумный системный администратор запускает только те серверы, которые ему нужны, не больше и не меньше.
Имейте в виду, что серверы сторонних производителей часто наиболее подвержены ошибкам.
Например,
запуск старой версии
.Xr imapd 8
или
.Xr popper 8 Pq Pa ports/mail/popper
это все равно что выдать универсальный корневой
билет всему миру.
Никогда не запускайте сервер, который вы не проверили
тщательно не проверили.
Многие серверы не обязательно запускать от имени root.
Например,
сервер
.Xr talkd 8 ,
.Xr comsat 8 ,
и
.Xr fingerd 8
демоны могут быть запущены в специальных пользовательских
.Dq sandboxes.
sandboxes не является идеальной, если не прибегать к большим усилиям, но
onion approach к безопасности остается в силе: если кто-то сможет проникнуть
через сервер, работающий в sandbox, ему все равно придется выйти из
sandbox.
Чем больше слоев должен преодолеть злоумышленник, тем ниже
вероятность его успеха.
Исторически сложилось так, что корневые дыры были обнаружены
практически в каждом сервере, когда-либо запущенном под правами root, включая базовые системные серверы.
Если вы управляете машиной, на которой люди входят в систему только через
.Xr sshd 8
и никогда не входят в систему через
.Nm telnetd
то отключите эту службу!
.Pp
.Fx
теперь работает по умолчанию
.Xr talkd 8 ,
.Xr comsat 8 ,
и
.Xr fingerd 8
в sandbox.
В зависимости от того, устанавливаете ли вы
устанавливаете ли вы новую систему или обновляете существующую, специальные
учетные записи пользователей, используемые в этих sandboxes, могут быть не установлены.
Благоразумный
системный администратор будет изучать и внедрять sandboxes для серверов, когда это возможно.
.Pp
Существует ряд других серверов, которые обычно не работают в sandboxes:
.Xr sendmail 8 ,
.Xr popper 8 ,
.Xr imapd 8 ,
.Xr ftpd 8 ,
и другие.
Существуют альтернативы
некоторые из них, но их установка может потребовать больше работы, чем вы готовы
выполнить
(фактор удобства снова дает о себе знать).
Возможно, вам придется запускать эти
серверы от имени root и полагаться на другие механизмы обнаружения взломов, которые могут
через них.
.Pp
Другой большой потенциальной дырой в системе являются SUID-root и SGID
установленные в системе.
Большинство этих двоичных файлов, таких как
.Xr su 1 ,
находятся в
.Pa /bin , /sbin , /usr/bin ,
или
.Pa /usr/sbin .
Хотя ничто не является безопасным на 100 %,
системные двоичные файлы по умолчанию SUID и SGID можно считать достаточно безопасными.
Тем не менее, иногда в этих двоичных файлах обнаруживаются root holes.
root hole
была обнаружена в Xlib в 1998 году, из-за которой
.Xr xterm 1 Pq Pa ports/x11/xterm
(который обычно является SUID)
уязвимым.
Лучше перестраховаться, чем потом жалеть, и предусмотрительный системный администратор ограничит SUID
двоичные файлы, которые должны запускаться только сотрудниками, специальной группой, доступ к которой имеют только сотрудники
доступ, и избавится от
.Pq Dq Li "chmod 000"
от всех двоичных файлов SUID, которые никто не использует.
Серверу без дисплея обычно не требуется
.Xr xterm 1 Pq Pa ports/x11/xterm
двоичный файл.
Двоичные файлы SGID могут быть почти столь же опасны.
Если злоумышленник сможет взломать двоичный файл SGID-kmem, он
злоумышленник сможет прочитать
.Pa /dev/kmem
и, таким образом, прочитать зашифрованный файл паролей
файл, что потенциально может скомпрометировать любую запароленную учетную запись.
В качестве альтернативы
злоумышленник, взломавший группу
.Dq Li kmem
может отслеживать нажатия клавиш, отправляемые через PTY,
включая PTY, используемые пользователями, которые входят в систему безопасными методами.
Злоумышленник
взломавший
.Dq Li tty
может писать практически на любой пользовательский TTY.
Если пользователь
работает с терминалом
программу или эмулятор с функцией имитации клавиатуры, злоумышленник может
потенциально
сгенерировать поток данных, который заставит терминал пользователя повторить команду, которая
которая затем будет выполнена от имени этого пользователя.
.Sh ЗАЩИТА УЧЕТНЫХ ЗАПИСЕЙ ПОЛЬЗОВАТЕЛЕЙ
Учетные записи пользователей обычно сложнее всего защитить.
Хотя вы можете наложить
draconian ограничения доступа для своих сотрудников и *открыть их пароли, вы можете
вы не сможете сделать это с любыми общими учетными записями пользователей, которые у вас есть.
Если
у вас есть достаточный контроль, то вы можете выиграть и сможете защитить
учетные записи пользователей должным образом.
Если же нет, то вам просто придется быть более бдительными при
мониторинг этих учетных записей.
Использование SSH и Kerberos для учетных записей пользователей является
более проблематично из-за дополнительного администрирования и технической поддержки.
но все же это очень хорошее решение по сравнению с зашифрованным файлом паролей.
файл.
.Sh ЗАЩИТА ФАЙЛА ПАРОЛЕЙ
Единственный надежный способ - это *убрать как можно больше паролей и
использовать SSH или Kerberos для доступа к этим учетным записям.
Даже если
зашифрованный файл паролей
.Pq Pa /etc/spwd.db
может быть прочитан только root, это может
злоумышленник может получить доступ на чтение к этому файлу, даже если он не может получить доступ на запись.
если злоумышленник не может получить доступ root на запись.
.Pp
Ваши сценарии безопасности должны всегда проверять и сообщать об изменениях в
файл паролей
(см.
.Sx ПРОВЕРКА ЦЕЛОСТНОСТИ ФАЙЛА
ниже).
.Sh ЗАЩИТА ЯДРА ЯДРА, НЕОБРАБОТАННЫХ УСТРОЙСТВ И ФАЙЛОВЫХ СИСТЕМ
Если злоумышленник взломает root, он сможет сделать практически все, что угодно, но есть
есть определенные удобства.
Например, в большинство современных ядер встроен драйвер устройства для обнюхивания пакетов.
По адресу
.Fx
он называется
.
.Xr bpf 4
устройство.
Злоумышленник обычно пытается запустить sniffer пакетов
на взломанной машине.
Вам не нужно предоставлять злоумышленнику такую
и большинство систем не должны иметь
.Xr bpf 4
скомпилированного устройства.
.Pp
Но даже если вы отключите
.Xr bpf 4
устройство, у вас все равно останется
.Pa /dev/mem
и
.Pa /dev/kmem
о которых нужно беспокоиться.
Если уж на то пошло,
злоумышленник все еще может записывать на необработанные дисковые устройства.
Кроме того, есть еще одна функция ядра, называемая загрузчиком модулей,
.Xr kldload 8 .
Предприимчивый злоумышленник может использовать модуль KLD для установки
свой собственный
.Xr bpf 4
устройство или другое устройство для прослушивания на работающее ядро.
Чтобы избежать этих проблем, необходимо запускать
ядро на более высоком уровне безопасности, по крайней мере на уровне 1.
Уровень безопасности можно установить с помощью команды
.Xr sysctl 8
на
.Va kern.securelevel
переменной.
После того как вы
установите уровень безопасности на 1, доступ на запись к необработанным устройствам будет запрещен, а
специальные
.Xr chflags 1
флаги, такие как
.Cm schg ,
будут применяться принудительно.
Вы также должны убедиться в том.
чтобы
.Cm schg
флаг установлен на критических запускаемых двоичных файлах, каталогах и
файлы сценариев \(em все, что запускается
до момента установки уровня безопасности.
Это может быть чрезмерным, и обновить систему гораздо сложнее.
а обновить систему гораздо сложнее, если вы работаете на более высоком уровне безопасности.
Вы можете пойти на компромисс и
запустить систему на более высоком уровне безопасности, но не устанавливать
.Cm schg
флаг для каждого
системных файлов и каталогов под солнцем.
Другая возможность заключается в том, чтобы просто
смонтировать
.Pa /
и
.Pa /usr
только для чтения.
Следует отметить, что слишком draconian меры
в том, что вы пытаетесь защитить, может помешать обнаружению важного факта
вторжения.
.Pp
Ядро работает с пятью различными уровнями безопасности.
Любой процесс суперпользователя может повысить уровень, но ни один процесс
не может его понизить.
Уровни безопасности следующие:
.Bl -tag -width flag
.It Ic -1
Постоянно небезопасный режим \- всегда запускать систему в небезопасном режиме.
Это начальное значение по умолчанию.
.It Ic 0
Небезопасный режим \- флаги immutable и append-only могут быть отключены.
Все устройства могут быть прочитаны или записаны в соответствии с их разрешениями.
.It Ic 1
Безопасный режим \- системные флаги неизменяемости и добавления не могут быть отключены.
не могут быть отключены;
диски для смонтированных файловых систем,
.Pa /dev/mem
и
.Pa /dev/kmem
не могут быть открыты для записи;
.Pa /dev/io
(если он есть в вашей платформе) может быть вообще не открыт;
модули ядра (см.
.Xr kld 4 )
не могут быть загружены или выгружены.
Отладчик ядра не может быть запущен с помощью команды
.Va debug.kdb.enter
sysctl, если только не установлен
.Xr MAC 9
политика предоставляет доступ, например, с помощью
.Xr mac_ddb 4 .
Панику или ловушку нельзя принудительно вызвать с помощью команды
.Va debug.kdb.panic ,
.Va debug.kdb.panic_str
и другие sysctl'ы.
.It Ic 2
Высокозащищенный режим \- то же самое, что и защищенный режим, плюс диски не могут быть
открывать для записи (кроме как с помощью
.Xr mount 2 )
независимо от того, смонтированы они или нет.
Этот уровень исключает вмешательство в файловые системы путем их размонтирования,
но также не позволяет запускать
.Xr newfs 8
пока система является многопользовательской.
.Pp
Кроме того, изменения времени ядра ограничены значением менее или равным одной
секунды.
Попытки изменить время более чем на одну секунду приведут к появлению сообщения
.Dq Регулировка времени зажата на +1 секунду.
.It Ic 3
Безопасный режим сети \- то же самое, что и высокобезопасный режим, плюс
Правила фильтрации IP-пакетов (см.
.Xr ipfw 8 ,
.Xr ipfirewall 4
и
.Xr pfctl 8 )
не могут быть изменены и
.Xr dummynet 4
или
.Xr pf 4
конфигурация не может быть изменена.
.El
.Pp
Уровень безопасности можно настроить с помощью переменных, задокументированных в
.Xr rc.conf 5 .
.Sh ПРОВЕРКА ЦЕЛОСТНОСТИ ФАЙЛОВ: ДВОИЧНЫЕ ФАЙЛЫ, КОНФИГУРАЦИОННЫЕ ФАЙЛЫ И Т.Д.
Когда дело доходит до дела, вы можете защитить только основную систему
конфигурационные и управляющие файлы до такой степени, что фактор удобства
не даст о себе знать.
Например, использование
.Xr chflags 1
для установки
.Cm schg
для большинства файлов в
.Pa /
и
.Pa /usr
вероятно, контрпродуктивен, потому что
хотя он может защитить файлы, он также закрывает окно обнаружения.
Последний слой
Последний слой лука безопасности, возможно, самый важный \(em обнаружения.
Остальные средства защиты практически бесполезны (или, что еще хуже, создают у вас
ложное чувство безопасности), если вы не можете обнаружить потенциальные вторжения.
Половина
работы лука заключается в том, чтобы замедлить атакующего, а не остановить его
чтобы дать слою обнаружения шанс поймать его на месте преступления.
на месте преступления.
.Pp
Лучший способ обнаружить вторжение - искать измененные, отсутствующие или
неожиданные файлы.
Лучший
способ поиска измененных файлов с помощью другой (часто централизованной)
системы с ограниченным доступом.
Написание сценариев безопасности в сверхбезопасной системе с ограниченным доступом
делает их практически невидимыми для потенциальных злоумышленников, и это очень важно.
Чтобы воспользоваться максимальным преимуществом, обычно приходится предоставлять
ограниченного доступа значительный доступ к другим машинам в бизнесе,
обычно либо путем экспорта других машин по NFS только для чтения на
или путем создания пар ключей SSH, позволяющих компьютеру с ограниченным доступом
бокса с ограниченным доступом к другим машинам по SSH.
За исключением сетевого трафика, NFS является
наименее заметный метод \(em, позволяющий следить за файловыми системами на каждом
клиентской машине практически незаметно.
Если ваш
сервер с ограниченным доступом подключен к клиентским боксам через коммутатор,
метод NFS часто является лучшим выбором.
Если сервер ограниченного доступа
подключен к клиентским боксам через концентратор или через несколько уровней
маршрутизации, метод NFS может быть слишком небезопасным (с точки зрения сети), и использование SSH
может быть лучшим выбором, даже с учетом того, что SSH оставляет следы аудита.
.Pp
Как только вы предоставите блоку ограничения доступа хотя бы доступ на чтение к клиентским системам
за которыми он должен следить, вы должны написать сценарии для выполнения фактического
мониторинга.
Учитывая монтирование NFS, вы можете написать сценарии из простых системных
утилит, таких как
.Xr find 1
и
.Xr md5 1 .
Лучше всего физически
.Xr md5 1
файлы клиентских ящиков по крайней мере раз в
день, и проверять управляющие файлы, такие как те, что находятся в
.Pa /etc
и
.Pa /usr/local/etc
еще чаще.
При обнаружении несоответствий относительно базового MD5
информации, о которой машина с ограниченным доступом знает, что она действительна, она должна крикнуть
сисадмину, чтобы тот пошел и проверил ее.
Хороший сценарий безопасности также будет проверять
несоответствующие двоичные файлы SUID, а также новые или удаленные файлы на системных разделах
таких как
.Pa /
и
.Pa /usr .
.Pp
При использовании SSH, а не NFS, написать сценарий безопасности гораздо сложнее.
сложнее.
По сути, вам нужно
.Xr scp 1
чтобы запустить скрипты на клиентском боксе, сделав их видимыми, и
для безопасности вам также нужно
.Xr scp 1
двоичные файлы (например
.Xr find 1 )
, которые эти скрипты используют.
Сайт
.Xr sshd 8
демон на клиентском компьютере может быть уже взломан.
В целом,
использование SSH может быть необходимо при работе по незащищенным каналам связи, но это также
с ним гораздо сложнее справиться.
.Pp
Хороший сценарий безопасности также будет проверять изменения в пользователях и сотрудниках
файлы конфигурации доступа:
.Pa .rhosts , .shosts , .ssh/authorized_keys
и так далее - файлы, которые могут оказаться вне сферы действия проверки MD5.
.Pp
Если у вас большой объем пользовательского дискового пространства, может потребоваться слишком много времени, чтобы прогнать
просмотреть все файлы на этих разделах.
В этом случае можно установить флаги монтирования
флаги, запрещающие размещение двоичных файлов SUID на этих разделах.
идея.
Сайт
.Cm nosuid
опция
(см.
.Xr mount 8 )
это то, что вы хотите рассмотреть.
Я бы в любом случае сканировал их по крайней мере раз в
неделю, поскольку цель этого слоя - обнаружить взлом независимо от того.
независимо от того, эффективен взлом или нет.
.Pp
Учет процессов
(см.
.Xr accton 8 )
это относительно малозатратная функция
операционной системы, которую я рекомендую использовать в качестве механизма оценки после взлома.
механизма.
Она особенно полезна для отслеживания того, как злоумышленник
взломал систему, если предположить, что файл остался нетронутым после
взлома.
.Pp
Наконец, сценарии безопасности должны обрабатывать файлы журналов, а сами журналы
должны генерироваться как можно более безопасным способом \(em удаленный syslog может быть
очень полезным.
Злоумышленник пытается замести следы, и файлы журналов очень важны
для системного администратора, пытающегося отследить время и способ первоначального
взлома.
Один из способов сохранить постоянную запись файлов журнала - подключить
подключить консоль системы к последовательному порту и постоянно собирать информацию
постоянный сбор информации с помощью защищенной машины, следящей за консолями.
.Sh ПАРАНОЙЯ
Немного паранойи никогда не помешает.
Как правило, системный администратор может добавить любое количество
функций безопасности, если они не влияют на удобство, и
может добавлять средства безопасности, которые влияют на удобство, с некоторыми дополнительными
размышлениями.
Что еще более важно, администратор безопасности должен смешивать
немного \(em если вы используете рекомендации, подобные тем, что даны в этом руководстве
дословно, вы отдаете свои методики на откуп потенциальному
злоумышленнику, который также имеет доступ к этой странице руководства.
.Sh СПЕЦИАЛЬНЫЙ РАЗДЕЛ, ПОСВЯЩЕННЫЙ DOSS-АТАКАМ
В этом разделе рассматриваются атаки типа "отказ в обслуживании".
DoS-атака обычно представляет собой пакетную атаку.
Хотя вы мало что можете сделать с современными поддельными
пакетными атаками, которые насыщают вашу сеть, вы можете ограничить ущерб.
обеспечив, чтобы атаки не могли вывести из строя ваши серверы.
.Bl -enum -offset indent
.It
Ограничение развилок серверов
.It
Ограничение атак с трамплина (атаки с ICMP-ответом, ping-трансляция и т. д.)
.It
Кэш маршрутов ядра
.El
.Pp
Распространенной DoS-атакой является атака на сервер-форк, которая пытается заставить сервер
сервер потреблять процессы, дескрипторы файлов и память до тех пор, пока машина не
пока машина не умрет.
Сайт
.Xr inetd 8
сервер
имеет несколько опций для ограничения такого рода атак.
Следует отметить, что, хотя можно предотвратить выход машины из строя
невозможно предотвратить выход машины из строя, но, как правило, невозможно предотвратить нарушение работы службы
в результате атаки.
Прочитайте
.Xr inetd 8
страницу руководства и обратите особое внимание
на
.Fl c , C ,
и
.Fl R
опции.
Обратите внимание, что атаки с поддельным IP будут обходить
опцию
.Fl C
опцию
.Xr inetd 8 ,
поэтому, как правило, необходимо использовать комбинацию опций.
Некоторые автономные серверы имеют параметры самоограничения вилок.
.Pp
Параметр
.Xr sendmail 8
имеет свои
.Fl OMaxDaemonChildren
которая, как правило, работает гораздо
лучше, чем попытка использовать
.Xr sendmail 8 Ns 's
опции ограничения нагрузки из-за
задержки загрузки.
Вам следует указать
.Va MaxDaemonChildren
при запуске
.Xr sendmail 8
достаточно высокий, чтобы справиться с ожидаемой нагрузкой, но не настолько высокий, чтобы
компьютер не сможет справиться с таким количеством
.Nm sendmail Ns
не упав при этом.
Также разумно запускать
.Xr sendmail 8
в
.Dq queued
режиме
.Pq Fl ODeliveryMode=queued
и запустить демон
.Pq Dq Nm sendmail Fl bd
отдельно от запуска queued
.Pq Dq Nm sendmail Fl q15m .
Если вы все еще хотите получать сообщения в реальном времени, вы можете запускать queued
с гораздо меньшим интервалом, например
.Fl q1m ,
но не забудьте указать разумное значение
.Va MaxDaemonChildren
для этого
.Xr sendmail 8
чтобы предотвратить каскадные сбои.
.Pp
Опция
.Xr syslogd 8
daemon может быть атакован напрямую, поэтому настоятельно рекомендуется использовать
.
.Fl s
при любой возможности, а также опцию
.Fl a
в противном случае.
.Pp
Также следует быть довольно осторожным
с сервисами обратного подключения, такими как reverse-identd от tcpwrapper, которые могут быть
могут быть атакованы напрямую.
Обычно вы не хотите использовать функцию reverse-ident
в tcpwrappers по этой причине.
.Pp
Очень хорошей идеей является защита внутренних служб от внешнего доступа
с помощью межсетевого экрана на пограничных маршрутизаторах.
Идея заключается в том, чтобы предотвратить
атак насыщения извне вашей локальной сети, но не столько для защиты внутренних
сервисов от сетевой компрометации корней.
Всегда настраивайте эксклюзивный
брандмауэр, т. е,
.So
брандмауэр всего
.Em, кроме
портов A, B, C, D и M-Z
.Sc .
Это
Таким образом вы можете отключить все низкие порты, кроме некоторых специфических
сервисов, таких как
.Xr talkd 8 ,
.Xr sendmail 8 ,
и других служб, доступных через Интернет.
Если вы попытаетесь настроить брандмауэр другим способом
\(em как всеохватывающий или разрешающий брандмауэр, велика вероятность того, что вы
забудете
закрыть
пару служб или добавите новую внутреннюю
службу и забудете обновить брандмауэр.
Вы все еще можете открыть
диапазон портов с высокими номерами на брандмауэре, чтобы разрешить работу, подобную разрешению
без ущерба для низких портов.
Также обратите внимание, что
.Fx
позволяет
контролировать диапазон номеров портов, используемых для динамического связывания, с помощью различных параметров
.Va net.inet.ip.portrange
sysctl'ы
.Pq Dq Li "sysctl net.inet.ip.portrange" ,
который также может
облегчить сложность конфигурации вашего брандмауэра.
Я обычно использую обычный
первый/последний диапазон от 4000 до 5000, и диапазон hiport от 49152 до 65535, затем
блокирую в своем брандмауэре все, что ниже 4000
(за исключением некоторых специфических
портов, доступных через Интернет, конечно).
.Pp
Другая распространенная DoS-атака называется трамплинной \(em для атаки на сервер
таким образом, чтобы заставить сервер генерировать ответы, которые затем перегружают
сервер, локальную сеть или другую машину.
Наиболее распространенной атакой
такого рода является атака ICMP PING BROADCAST.
Злоумышленник подменяет ping
пакеты, отправленные на широковещательный адрес вашей локальной сети с IP-адресом источника
на реальную машину, которую хотят атаковать.
Если ваши пограничные маршрутизаторы не
не настроены на подавление пингов на широковещательные адреса, ваша локальная сеть будет
генерирует достаточно ответов на поддельный адрес источника, чтобы насытить жертву
жертву, особенно если злоумышленник использует один и тот же трюк на нескольких десятках
широковещательных адресов в нескольких десятках различных сетей одновременно.
Были зафиксированы широковещательные атаки мощностью более ста двадцати мегабит.
Вторая распространенная атака трамплина направлена против системы сообщений об ошибках ICMP.
С помощью
создавая пакеты, генерирующие ответы на ICMP-ошибки, злоумышленник может
насытить входящую сеть сервера и заставить сервер насытить свою
исходящей сети ICMP-ответами.
Этот тип атаки также может вывести сервер из строя
сервер, выведя его из
.Vt mbuf Ns 's ,
особенно если сервер не в состоянии достаточно быстро отводить
ICMP-ответов, которые он генерирует, достаточно быстро.
Сайт
.Fx
ядро имеет новую опцию
компиляции под названием
.Dv ICMP_BANDLIM
которая ограничивает эффективность подобных
атак.
Последний основной класс атак на трамплин связан с
некоторыми внутренними
.Xr inetd 8
службами, такими как служба эха UDP.
Злоумышленник
просто подделывает UDP-пакет, адресом источника которого является echo port сервера A,
а адрес назначения - echo port сервера B, где серверы A и B
находятся в вашей локальной сети.
Затем оба сервера пересылают этот пакет туда и обратно
между собой.
Злоумышленник может перегрузить оба сервера и их
локальные сети, просто отправив несколько пакетов таким образом.
Аналогичные проблемы
существуют и с внутренним портом chargen.
Грамотный системный администратор отключит все
из них
.Xr inetd 8 Ns -internal
тестовые службы.
.Sh ПРОБЛЕМЫ ДОСТУПА С KERBEROS И SSH
Есть несколько проблем с Kerberos и SSH, которые необходимо решить.
если вы собираетесь их использовать.
Kerberos5 - это отличный протокол аутентификации
но керберизованный протокол
.Xr telnet 1
отстой.
Есть ошибки, которые делают их непригодными для работы с двоичными потоками.
Кроме того, по умолчанию
Kerberos не шифрует сессию, если вы не используете
.Fl x
опцию.
SSH шифрует все по умолчанию.
.Pp
SSH работает хорошо во всех отношениях, кроме случаев, когда он настроен на
пересылки ключей шифрования.
Это означает, что если у вас есть защищенная рабочая станция, на которой хранятся
ключи, которые дают вам доступ к остальной части системы, и вы
.Xr ssh 1
на
небезопасной машине, ваши ключи становятся открытыми.
Сами ключи
не раскрываются, но
.Xr ssh 1
устанавливает порт переадресации на время вашего
и если злоумышленник взломал root на незащищенной машине, он может использовать
этот порт, чтобы использовать ваши ключи для получения доступа к любой другой машине, которую ваши
ключи разблокированы.
.Pp
Мы рекомендуем использовать SSH в сочетании с Kerberos, когда это возможно
для входа сотрудников в систему.
SSH может быть скомпилирован с поддержкой Kerberos.
Это уменьшает
зависимость от потенциально уязвимых ключей SSH и в то же время
защищая пароли с помощью Kerberos.
Ключи SSH
следует использовать только для выполнения автоматизированных задач с защищенных машин (то, для чего
для чего Kerberos не подходит).
Мы также рекомендуем отключить
переадресацию ключей в конфигурации SSH, либо использовать
.Va от Ns = Ns Ar IP/DOMAIN
опцию, которую SSH позволяет использовать в файле
.Pa authorized_keys
чтобы сделать ключ доступным только для субъектов, входящих в систему с определенных
машины.
.Sh КНОПКИ И ДВИГАТЕЛИ
.Fx
предоставляет несколько регуляторов и ручек подстройки, которые делают доступ к некоторым видам интроспекции
доступ к некоторой информации более ограниченным.
Некоторые люди считают, что это повышает безопасность системы, поэтому эти регуляторы
кратко перечислены здесь, а также элементы управления, позволяющие смягчить некоторые
утечки информации об аппаратном состоянии.
.Pp
Описанные ниже регуляторы sysctl для смягчения аппаратного воздействия были перенесены в раздел
.Pa machdep.mitigations ,
с шимми обратной совместимости, чтобы принять существующие имена.
Будущее изменение рационализирует смысл отдельных sysctl'ов
(так, чтобы enabled / true всегда указывало на то, что смягчение активно).
По этой причине прежние имена остаются каноническим способом установки
и документированы здесь.
Backwards  для промежуточных sysctls в разделе
.Pa machdep.mitigations
добавляться не будут.
.Bl -tag -width security.bsd.unprivileged_proc_debug
.It Dv security.bsd.see_other_uids
Контролирует видимость и доступность субъектов (например, процессов) и объектов
(например, процессов) и объектов (например, сокетов), принадлежащих другому uid.
The knob напрямую влияет на
.Dv kern.proc
sysctls фильтрации данных, что приводит к ограничению вывода данных из
таких утилит, как
.Xr ps 1 .
.It Dv security.bsd.see_other_gids
То же самое, для субъектов и объектов, принадлежащих другому gid.
.It Dv security.bsd.see_jail_proc
То же, для субъектов и объектов, принадлежащих другой jail, включая
sub-jails.
.It Dv security.bsd.conservative_signals
Если включено, непривилегированным пользователям разрешается посылать только сигналы управления заданиями
и обычные сигналы завершения работы, такие как
.Dv SIGKILL ,
.Dv SIGINT ,
и
.Dv SIGTERM ,
процессам, выполняющим программы с измененными идентификаторами.
.It Dv security.bsd.unprivileged_proc_debug
Контролирует доступность средств отладки процессов для пользователей, не являющихся root-пользователями.
См. также
.Xr proccontrol 1
режим
.Dv trace .
.It Dv vm.pmap.pti
Настраиваемый, только для amd64.
Включает режим работы системы виртуальной памяти, при котором таблицы страниц usermode
таблицы страниц usermode дезинфицируются для предотвращения так называемой утечки информации Meltdown на
некоторых процессорах Intel.
По умолчанию система определяет, нуждается ли процессор в таком обходном пути,
и включает его автоматически.
См. также
.Xr proccontrol 1
режим
.Dv kpti .
.It Dv machdep.mitigations.flush_rsb_ctxsw
amd64.
Управляет промывкой буфера стека возврата при переключении контекста, чтобы предотвратить
межпроцессных ret2spec-атак.
Необходим и включен по умолчанию только в том случае, если машина
поддерживает SMEP, в противном случае IBRS будет выполнять необходимую промывку при входе в ядро
в любом случае.
.It Dv hw.mds_disable
amd64 и i386.
Контролирует аппаратную утечку информации при микроархитектурной выборке данных
Смягчение.
.It Dv hw.spec_store_bypass_disable
amd64 и i386.
Контролирует аппаратное предотвращение утечки информации через Speculative Store Bypass.
.It Dv hw.ibrs_disable
amd64 и i386.
Контролирует аппаратную утечку информации Indirect Branch Restricted Speculation
смягчение последствий.
.It Dv machdep.syscall_ret_flush_l1d
amd64.
Контролирует принудительную очистку кэша L1D при возврате из системных вызовов, которые сообщают об
об ошибках, отличных от
.Ev EEXIST ,
.Ev EAGAIN ,
.Ev EXDEV ,
.Ev ENOENT ,
.Ev ENOTCONN ,
.Ev EINPROGRESS .
Это в основном параноидальная настройка, добавленная для предотвращения гипотетической эксплуатации
неизвестных гаджетов для решения неизвестных аппаратных проблем.
Список исключения кодов ошибок состоит из наиболее распространенных ошибок, которые
которые обычно возникают при нормальной работе системы.
.It Dv machdep.nmi_flush_l1d_sw
amd64.
Управляет принудительной очисткой кэша L1D при NMI;
Это обеспечивает программную помощь для смягчения последствий неисправности терминала L1
аппаратной утечки информации.
.It Dv hw.vmm.vmx.l1d_flush
amd64.
Управляет устранением неисправности терминала L1 в гипервизоре bhyve.
.It Dv vm.pmap.allow_2m_x_ept
amd64.
Разрешает использование суперстраниц для отображения исполняемых файлов в формате EPT
формат таблицы страниц, используемый гипервизорами на процессорах Intel для отображения гостевого
физического адресного пространства в физическую память машины.
Может быть отключено для обхода ошибки процессора под названием
Machine Check Error Avoidance on Page Size Change.
.It Dv machdep.mitigations.rngds.enable
amd64 и i386.
Контролирует смягчение последствий выборки данных из буфера специального регистра в сравнении с
оптимизации доступа MCU.
Если значение равно нулю, смягчение отключено, и инструкции RDSEED и RDRAND
не несут накладных расходов на сериализацию при доступе к общему буферу,
и не сериализуют обращения к внеядерной памяти.
.It Dv kern.elf32.aslr.enable
Управляет системной глобальной случайной разметкой адресного пространства (ASLR) для
обычных не-PIE (Position Independent Executable) 32-битных двоичных файлов ELF.
См. также
.Xr proccontrol 1
.Dv aslr
режим, на который также влияет флаг примечания к управлению каждым изображением.
.It Dv kern.elf32.aslr.pie_enable
Управляет системной глобальной случайной компоновкой адресного пространства для
position-independent (PIE) 32-битных двоичных файлов.
.It Dv kern.elf32.aslr.honor_sbrk
Делает ASLR менее агрессивным и более совместимым со старыми двоичными программами
полагающимися на область sbrk.
.It Dv kern.elf32.aslr.stack
Делает случайным стек для 32-битных программ.
В противном случае стек отображается в фиксированное место, определяемое
ABI процесса.
.It Dv kern.elf64.aslr.enable
Управление ASLR для 64-битных двоичных файлов ELF.
.It Dv kern.elf64.aslr.pie_enable
Контроль ASLR для 64-битных ELF PIE.
.It Dv kern.elf64.aslr.honor_sbrk
Контроль совместимости ASLR sbrk для 64-bit двоичных файлов.
.It Dv kern.elf64.aslr.stack
Управляет случайностью адресов стека для 64-bit двоичных файлов.
.It Dv kern.elf32.nxstack
Включает неисполняемый стек для 32-bit процессов.
Включен по умолчанию, если поддерживается аппаратным обеспечением и соответствующими двоичными файлами.
.It Dv kern.elf64.nxstack
Включает неисполняемый стек для 64-bit процессов.
.It Dv kern.elf32.allow_wx
Разрешает отображение одновременно записываемых и исполняемых страниц для
32-bit процессов.
.It Dv kern.elf64.allow_wx
Разрешает отображение одновременно записываемых и исполняемых страниц для
64-bit процессов.
..El
.Sh СМОТРИ ТАКЖЕ
.Xr chflags 1 ,
.Xr find 1 ,
.Xr md5 1 ,
.Xr netstat 1 ,
.Xr openssl 1 ,
.Xr proccontrol 1 ,
.Xr ps 1 ,
.Xr ssh 1 ,
.Xr xdm 1 Pq Pa ports/x11/xorg-clients ,
.Xr group 5 ,
.Xr ttys 5 ,
.Xr mitigations 7 ,
.Xr accton 8 ,
.Xr init 8 ,
.Xr sshd 8 ,
.Xr sysctl 8 ,
.Xr syslogd 8 ,
.Xr vipw 8
.Sh ИСТОРИЯ
.Nm
была первоначально написана
.An Matthew Dillon
и впервые появилась
в
.Fx 3.1 ,
декабрь 1998 года.
