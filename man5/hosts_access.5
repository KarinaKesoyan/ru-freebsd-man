.TH HOSTS_ACCESS 5
.SH ИМЯ
hosts_access \- формат файлов управления доступом к хосту
.SH ОПИСАНИЕ
На этой странице руководства описывается простой язык управления доступом,
основанный на шаблонах клиента (имя/адрес хоста, имя пользователя) и сервера (имя процесса
, имя/адрес хоста).  Примеры приведены в конце. 
Нетерпеливому читателю рекомендуется перейти к разделу ПРИМЕРОВ для
краткого ознакомления.
.PP
Расширенная версия языка управления доступом описана в
документе \fIhosts_options\fR(5). Расширения включаются во
время сборки программы с помощью команды -DPROCESS_OPTIONS.
.PP
В следующем тексте \fIdaemon\fR - это имя процесса
daemon, а \fIclient\fR - это имя и/или адрес
хоста, запрашивающего услугу. Имена процессов сетевого daemon указаны
в файле конфигурации inetd.
.SH ФАЙЛЫ УПРАВЛЕНИЯ ДОСТУПОМ
Программа управления доступом просматривает два файла. Поиск прекращается
при первом совпадении:
.IP \(bu
Доступ будет предоставлен, когда пара (daemon,клиент) совпадет с записью в
файле \fI/etc/hosts.allow\fR.
.IP \(bu
В противном случае доступ будет запрещен, если пара (daemon,клиент) совпадет с
записью в файле \fI/etc/hosts.deny\fR.
.IP \(bu
В противном случае доступ будет предоставлен.
.PP
Несуществующий файл управления доступом рассматривается как пустой
файл. Таким образом, управление доступом можно отключить, не предоставляя никаких
файлов управления доступом.
ПРАВИЛА УПРАВЛЕНИЯ ДОСТУПОМ .SH
Каждый файл управления доступом состоит из нуля или более строк текста.  Эти
строки обрабатываются в порядке их появления. Поиск завершается, когда
найдено совпадение.
.IP \(bu
Символ новой строки игнорируется, если перед ним стоит обратная косая
черта. Это позволяет разделять длинные строки, чтобы их было
легче редактировать.
.IP \(bu
Пустые строки или строки, начинающиеся с символа "#", игнорируются.
Это позволяет вставлять комментарии и пробелы, чтобы
упростить чтение таблиц.
.IP \(bu
Все остальные строки должны соответствовать следующему формату, при этом значения между []
необязательны:
.sp
.ti +3
daemon_list : client_list [ : shell_command ]
.PP
\fIdaemon_list\fR - это список имен одного или нескольких процессов daemon
(значения argv[0]) или групповых символов (см. ниже).
.PP
\fIclient_list\fR - это список
из одного или нескольких имен хостов, адресов хостов, шаблонов или групповых символов (см.
ниже), которые будут сопоставлены с именем или адресом клиентского хоста.
.PP
Более сложные формы \fIdaemon@host\fR и \fIuser@host\fR
описаны в разделах, посвященных шаблонам конечных точек сервера и
поиску имени пользователя клиента, соответственно.
.PP
Элементы списка должны быть разделены пробелами и/или запятыми.
.PP
За исключением поиска в сетевой группе NIS (YP), все
проверки контроля доступа не чувствительны к регистру.
.ne 4
.SH ШАБЛОНЫ
Язык управления доступом реализует следующие шаблоны:
.IP \(bu
Строка, начинающаяся с символа ".\". Имя хоста считается соответствующим, если
последние компоненты его имени соответствуют указанному шаблону.  
Например, шаблон ".tue.nl\" соответствует имени хоста
`wzv.win.tue.nl\".
.IP \(bu
Строка, заканчивающаяся символом `.\'. Адрес хоста считается соответствующим, если
его первые числовые поля соответствуют заданной строке. Например,
шаблон `131.155.' соответствует адресу (почти) каждого хоста в
университетской сети Эйндховена (131.155.x.x).
.IP \(bu
Строка, начинающаяся с символа "@", рассматривается как
имя сетевой группы NIS (ранее YP). Имя хоста совпадает, если он является
членом указанной сетевой группы. Сопоставление сетевых групп не поддерживается
для имен deamon процессов или имен пользователей-клиентов.
.IP \(bu
Выражение вида "n.n.n.n/m.m.m.m" интерпретируется как пара
"сетка/маска". Адрес хоста совпадает, если значение "net" равно
побитовому значению "AND" адреса и "маски". Например, шаблон сети/маски
"131.155.72.0/255.255.254.0" соответствует каждому адресу в
диапазоне от "131.155.72.0" до `131.155.73.255"
.IP \(bu
Выражение вида `[n:n:n:n:n:n:n:n:n]/m' интерпретируется как пара
`[net]/prefixlen'. Адрес хоста IPv6 совпадает, если
биты "prefixlen" в "net" равны битам "
prefixlen" в адресе. Например, шаблон [net]/prefixlen соответствует
`[3ffe:505:2:1::]/64\' соответствует каждому адресу в диапазоне
`3ffe:505:2:1::\' через `3ffe:505:2:1:ffff:ffff:ffff:ffff".
.IP \(bu
Строка, начинающаяся с символа "/\", рассматривается как
имя файла. Имя хоста или адрес сопоставляются, если они совпадают с любым именем хоста
или шаблоном адресов, указанным в именованном файле. Формат файла -
ноль или более строк с нулем или более шаблонов имен хостов или адресов
, разделенных пробелами. Шаблон имени файла можно использовать везде, где можно использовать шаблон
имени хоста или адреса.
.SH ПОДСТАНОВОЧНЫЕ ЗНАКИ
Язык управления доступом поддерживает явные подстановочные знаки:
.IP ALL
Универсальный подстановочный знак, всегда совпадает.
.IP LOCAL
Соответствует любому хосту, имя которого не содержит символа точки.
.IP UNKNOWN
Соответствует любому пользователю, имя которого неизвестно, и любому хосту, имя которого
\fIor\fR адреса неизвестны.  Этот шаблон следует использовать с осторожностью:
имена хостов могут быть недоступны из-за временных проблем с сервером имен. 
Сетевой адрес будет недоступен, если программное обеспечение не сможет определить,
к какому типу сети оно подключено.
.IP KNOWN
Соответствует любому пользователю, чье имя известно, и любому хосту, чье имя
\fiи адрес \fR известны. Этот шаблон следует использовать с осторожностью:
имена хостов могут быть недоступны из-за временных проблем с сервером имен.  
Сетевой адрес будет недоступен, если программное обеспечение не сможет определить,
к какому типу сети оно подключено.
.IP PARANOID
Соответствует любому хосту, имя которого не совпадает с его адресом.  Когда tcpd
создается с помощью -PARANOID (режим по умолчанию), он отбрасывает запросы от таких
клиентов даже до просмотра таблиц контроля доступа.  
Если вы хотите получить больший контроль над такими запросами, создайте без -DPARANOID.
.ne 6
.SH ОПЕРАТОРЫ
.IP EXCEPT
Предполагаемое использование имеет вид: `list_1 EXCEPT list_2\'; эта конструкция
соответствует всему, что соответствует \fIlist_1\fR, если только оно не соответствует
\fIlist_2\fR.  Оператор EXCEPT может использоваться как в daemon_lists, так и в
client_lists. Оператор EXCEPT может быть вложенным: если
язык управления допускает использование круглых скобок, `a EXCEPT b EXCEPT c\'
будет обрабатываться как  `(a EXCEPT (b EXCEPT c))\'.
.br
.ne 6
.SH КОМАНДЫ ОБОЛОЧКИ
Если первое совпадающее правило управления доступом содержит команду оболочки, эта
команда подвергается замене %<буква> (см. следующий раздел).
Результат выполняется дочерним процессом \fI/bin/sh\fR со стандартным
вводом, выводом и ошибкой, подключенным к \fI/dev/null\fR. Укажите `&\'
в конце команды, если вы не хотите ждать ее
завершения.
.PP
Команды оболочки не должны полагаться на параметр PATH в inetd.
Вместо этого они должны использовать абсолютные имена путей или начинаться с
явного указания PATH=whatever.
.PP
В документе \fIhosts_options\fR(5) описывается альтернативный язык
, который использует поле команд оболочки другим и несовместимым способом.
.SH % РАСШИРЕНИЯ
В командах оболочки доступны следующие расширения:
.IP "%a (%A)"
Адрес хоста клиента (сервера).
.IP %c
Информация о клиенте: пользователь@хост, пользователь@адрес, имя хоста или просто
адрес, в зависимости от объема доступной информации.
.IP %d
Имя daemon процесса (значение argv[0]).
.IP "%h (%H)"
Имя или адрес хоста клиента (сервера), если имя хоста
недоступно.
.IP "%n (%N)"
Имя хоста клиента (сервера) (или "unknown", или "paranoid").
.IP %p
Идентификатор daemon процесса.
.IP %s
Информация о сервере: daemon@host, daemon@address или просто имя daemon,
в зависимости от объема доступной информации.
.IP %u
Имя пользователя клиента (или "неизвестно").
.IP %%
Расширяется до одного символа "%\".
.PP
Символы в расширениях %, которые могут сбить с толку оболочку, заменяются
символами подчеркивания.
.SH ШАБЛОНЫ КОНЕЧНЫХ ТОЧЕК СЕРВЕРА
Чтобы различать клиентов по сетевому адресу, к которому они
подключаются, используйте шаблоны вида:
.sp
.ti +3
process_name@host_pattern : client_list ...
.sp
Подобные шаблоны можно использовать, когда у компьютера разные интернет-
адреса с разными именами хостов.  Поставщики услуг могут использовать
эту возможность для предоставления архивов FTP, GOPHER или WWW с интернет-именами
, которые могут принадлежать даже разным организациям. Смотрите также опцию 'twist'
в документе hosts_options(5). Некоторые системы (Solaris,
FreeBSD) могут иметь более одного интернет-адреса на одном физическом
интерфейсе; в других системах вам, возможно, придется прибегнуть к
псевдоинтерфейсам SLIP или PPP, которые находятся в выделенном сетевом адресном пространстве.
.sp
Параметр host_pattern подчиняется тем же правилам синтаксиса, что и имена хостов и
адреса в контексте client_list. Обычно информация о конечной точке сервера
доступна только в сервисах, ориентированных на подключение.
.SH ПОИСК ИМЕНИ ПОЛЬЗОВАТЕЛЯ КЛИЕНТА
Если клиентский хост поддерживает протокол RFC 931 или один из его
потомков (TAP, IDENT, RFC 1413), программы-оболочки могут получать
дополнительную информацию о владельце соединения.
Информация об имени пользователя клиента, если она доступна, регистрируется вместе с именем клиентского хоста
и может использоваться для сопоставления таких шаблонов, как:
.PP
.ti +3
daemon_list : ... user_pattern@host_pattern ...
.PP
Daemon оболочки могут быть сконфигурированы во время компиляции для выполнения
поиска имени пользователя на основе правил (по умолчанию) или для постоянного
запроса клиентского хоста. В случае поиска имени пользователя, управляемого правилами, приведенное выше
правило вызовет поиск имени пользователя только в том случае, если совпадают как \fIdaemon_list\from
, так и \fIhost_pattern\fR.
.PP
Шаблон пользователя имеет тот же синтаксис, что и шаблон daemon процесса, поэтому применяются те
же подстановочные знаки (членство в сетевой группе не поддерживается).  
Однако не следует увлекаться поиском имени пользователя.
.IP \(bu
Информации об имени пользователя клиента нельзя доверять, когда она
наиболее необходима, т.е. когда клиентская система была взломана. В общем,
ВСЕ и (НЕ)ИЗВЕСТНЫЕ - это единственные шаблоны имен пользователей, которые имеют смысл.
.IP \(bu
Поиск имени пользователя возможен только с помощью служб, основанных на протоколе TCP, и только
тогда, когда на клиентском хосте запущен подходящий daemon; во всех остальных случаях
результат "неизвестен".
.IP \(bu
Хорошо известная ошибка в ядре UNIX может привести к потере обслуживания, когда имя пользователя
поисковые запросы блокируются брандмауэром. Документ README
описывает процедуру, позволяющую выяснить, есть ли в вашем ядре эта ошибка.
.IP \(bu
Поиск имени пользователя может привести к заметным задержкам для пользователей, не использующих UNIX.  
Время ожидания по умолчанию для поиска имени пользователя составляет 10 секунд: слишком мало для работы
в медленных сетях, но достаточно долго, чтобы раздражать пользователей ПК.
.PP
Выборочный поиск имени пользователя может устранить последнюю проблему. Например,
такое правило, как:
.PP
.ti +3
daemon_list : @pcnetgroup ALL@ALL
.PP
будет сопоставляться с членами сетевой группы ПК без поиска имени пользователя,
но будет выполнять поиск имени пользователя во всех других системах.
.SH ОБНАРУЖЕНИЕ АТАК С ПОДМЕНОЙ АДРЕСА
Недостаток в генераторе порядковых номеров многих реализаций TCP/IP
позволяет злоумышленникам легко выдавать себя за доверенные хосты и проникать в
систему, например, через службу удаленной оболочки.  Служба идентификации (RFC931 и т.д.)
может использоваться для обнаружения таких и других
атак на подмену адреса хоста.
.PP
Прежде чем принять запрос клиента, разработчики могут воспользоваться службой идентификации, чтобы выяснить, что клиент вообще не отправлял запрос.
Когда клиентский хост предоставляет услугу идентификации, отрицательный
результат поиска идентификатора (клиент соответствует `UNKNOWN@host') является убедительным доказательством
атаки подмены хоста.
.PP
Положительный результат поиска идентификатора (клиент соответствует "ИЗВЕСТНОМУ хосту") вызывает
меньше доверия. Злоумышленник может подделать как
клиентское соединение, так и идентификатор, хотя сделать это намного
сложнее, чем подделать только клиентское соединение. Также может случиться так, что
сервер идентификации клиента лжет.
.PP
Примечание: Поиск идентификаторов не работает со службами UDP.
.SH ПРИМЕРЫ
Язык достаточно гибкий, поэтому различные типы
политик контроля доступа могут быть сформулированы с минимальными усилиями. Хотя в языке
используются две таблицы контроля доступа, наиболее распространенные политики могут быть
реализованы с использованием тривиальной или даже пустой таблицы.
.PP
При чтении приведенных ниже примеров важно понимать, что таблица
разрешений проверяется перед таблицей запрещений, что поиск
завершается при обнаружении совпадения и что доступ предоставляется, когда
совпадения не найдены вообще.
.PP
В примерах используются имена хостов и доменов. Их можно улучшить,
включив информацию об адресе и/или сети/сетевой маске, чтобы уменьшить
влияние временных сбоев поиска на сервере имен.
.SH В ОСНОВНОМ ЗАКРЫТЫЕ
В этом случае доступ по умолчанию запрещен. Доступ разрешен только явно авторизованным
хостам.
.PP
Политика по умолчанию (отсутствие доступа) реализуется с помощью тривиального
файла запрета:
.PP
.ne 2
/etc/hosts.deny: 
.in +3
ALL: ALL
.PP
Это полностью отключает обслуживание всех хостов, если только им не разрешен доступ
с помощью записей в файле allow.
.PP
Явно авторизованные хосты перечислены в файле разрешений.
Например:
.PP
.ne 2
/etc/hosts.allow: 
.in +3
ALL: LOCAL @some_netgroup
.br
ALL: .foobar.edu EXCEPT terminalserver.foobar.edu
.PP
Первое правило разрешает доступ с хостов в локальном домене (без "."
в имени хоста) и от членов сетевой группы \fIsome_netgroup\fP
.  Второе правило разрешает доступ со всех хостов в
домене \\fI foobar.edu\fP (обратите внимание на начальную точку), за исключением
\\fI terminal server.foobar.edu\fP.
.SH В ОСНОВНОМ ОТКРЫТЕ
Здесь доступ предоставляется по умолчанию; только явно указанным хостам
отказано в обслуживании.
.PP
Политика по умолчанию (доступ предоставлен) делает файл "разрешить" избыточным
, поэтому его можно опустить.  Явно неавторизованные хосты перечислены
в файле "Запретить". Например:
.PP
/etc/hosts.deny:
.in +3
ALL: some.host.name, .some.domain
.br
ALL EXCEPT in.fingerd: other.host.name, .other.domain
.PP
Первое правило запрещает некоторым хостам и доменам пользоваться всеми услугами; второе
правило по-прежнему разрешает запросы finger от других хостов и доменов.
ЛОВУШКИ .SH
В следующем примере разрешены запросы tftp от хостов в локальном домене
(обратите внимание на начальную точку). Запросы с любых других хостов отклоняются.
Вместо запрошенного файла
на хост-нарушитель отправляется тестовый запрос. Результат отправляется суперпользователю по почте.
.PP
.ne 2
/etc/hosts.allow:
.in +3
.nf
in.tftpd: LOCAL, .my.domain
.PP
.ne 2
/etc/hosts.deny:
.in +3
.nf
in.tftpd: ALL: (/some/where/safe_finger -l @%h | \\
	/usr/ucb/mail -s %d-%h root) &
.fi
.PP
Команда safe_finger предназначена для использования в режиме обратной аппликатуры и должна быть
установлена в подходящем месте. Она ограничивает возможный ущерб от данных, отправляемых
удаленным сервером finger. Она обеспечивает лучшую защиту, чем
стандартная команда finger.
.PP
Расширение последовательностей %h (клиентский хост) и %d (имя службы)
описано в разделе, посвященном командам оболочки.
.PP
Предупреждение: не ставьте ловушку в свой finger daemon, если только вы не готовы
к бесконечным петлям пальцами.
.PP
В системах сетевого брандмауэра этот трюк может быть применен еще шире.
Обычный сетевой брандмауэр предоставляет только ограниченный набор услуг для
внешнего мира. Все остальные службы могут быть "прослушаны", как в приведенном выше
примере tftp. В результате получается отличная система раннего предупреждения.
.br
.ne 4
.SH ДИАГНОСТИКА
Сообщение об ошибке появляется, когда в правиле управления доступом к хосту обнаружена синтаксическая ошибка
; когда длина правила управления доступом превышает
емкость внутреннего буфера; когда правило управления доступом не
завершается символом новой строки; когда результат %<буква>
расширение приведет к переполнению внутреннего буфера; при сбое системного вызова
этого быть не должно.  Обо всех проблемах сообщается через daemon системного журнала.
.SH ПРИМЕЧАНИЯ ПО ВНЕДРЕНИЮ
Некоторые операционные системы распространяются с TCP-оболочками как частью
базовой системы. Для таких систем характерно встраивание функций обертывания
в сетевые утилиты. Примечательно, что некоторые системы предлагают \fIinetd\fR(8)
для этого не требуется использовать \fItcpd\fR(8). Подробности см.
в документации к вашей системе.
.SH ФАЙЛЫ
.na
.nf
/etc/hosts.allow, (daemon,client) pairs that are granted access.
/etc/hosts.deny, (daemon,client) pairs that are denied access.
.ad
.fi
.SH СМОТРЕТЬ ТАКЖЕ
.nf
tcpd(8) tcp/ip daemon wrapper program.
tcpdchk(8), tcpdmatch(8), test programs.
.SH ОШИБКИ
Если время поиска по серверу имен истечет, имя хоста будет недоступно
программному обеспечению контроля доступа, даже если хост зарегистрирован.
.PP
Поиск по доменным именам на сервере не чувствителен к регистру; поиск по сетевым группам NIS (ранее YP)
чувствителен к регистру.
.SH АВТОР
.na
.nf
Wietse Venema (wietse@wzv.win.tue.nl)
Department of Mathematics and Computing Science
Eindhoven University of Technology
Den Dolech 2, P.O. Box 513, 
5600 MB Eindhoven, The Netherlands
\" @(#) hosts_access.5 1.20 95/01/30 19:51:46
\" $FreeBSD$
